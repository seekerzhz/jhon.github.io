{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/typing/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/typing/source/css/source.css","path":"css/source.css","modified":0,"renderable":1},{"_id":"themes/typing/source/css/typing.css","path":"css/typing.css","modified":0,"renderable":1},{"_id":"themes/typing/source/images/alipay.svg","path":"images/alipay.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/bitcoin.svg","path":"images/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/github.svg","path":"images/github.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/like.svg","path":"images/like.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/paypal.svg","path":"images/paypal.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/images/wechat.svg","path":"images/wechat.svg","modified":0,"renderable":1},{"_id":"themes/typing/source/js/typing.js","path":"js/typing.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1739868824327},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1739867957395},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1739867957399},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1739867957403},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1739867954355},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739867943555},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1739867943559},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1739867943563},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1739867957391},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1739867957387},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1739867955827},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739867954355},{"_id":"public/2025/02/18/hello-world/index.html","hash":"e6f1f0982dbf285dc789a15bff3fc6574dd10144","modified":1739875309041},{"_id":"public/archives/index.html","hash":"a7022527618cee40888fc8ebc3317879c3c67c44","modified":1739875309041},{"_id":"public/archives/2025/index.html","hash":"e63f233a85916668145b70120d1310456e78756b","modified":1739875309041},{"_id":"public/archives/2025/02/index.html","hash":"75c22c88ae99e1c764d90949f8a6b0a080d861f2","modified":1739875309041},{"_id":"public/index.html","hash":"34deb3a3ef82ebe48dae5c932d96050bfb03da5e","modified":1739875309041},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739869363844},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1739869363844},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1739869363844},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1739869363844},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1739869363844},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1739869363844},{"_id":"source/_posts/测试文章.md","hash":"3bd14fd313104bb0923358ae6e9f3f603a4e3921","modified":1739879339301},{"_id":"public/2025/02/18/测试文章/index.html","hash":"411fad14f8a8bb88685c5ed4a01bb5bbfaabbc5f","modified":1739875309041},{"_id":"themes/typing/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1739874619168},{"_id":"themes/typing/.gitignore","hash":"6f88a489c8a1c44d9e16c86116d78fc44e69e08b","modified":1739874619168},{"_id":"themes/typing/CHANGELOG.md","hash":"2721cbb008e0c97b0a4eab8003edec47820b18ca","modified":1739874619168},{"_id":"themes/typing/LICENSE","hash":"e4bf48251989dd666899d2d22b351b8db4764992","modified":1739874619168},{"_id":"themes/typing/README.md","hash":"dfc1d9b4962d04ecf900b4137a9bce9f7aff5cac","modified":1739874619168},{"_id":"themes/typing/_config.yml","hash":"3172e913f04cd8524bf3834e52b769e35a71383e","modified":1739878378693},{"_id":"themes/typing/makefile","hash":"14460dfe2cdfad8ec0b076d0998470aa83347b42","modified":1739874619172},{"_id":"themes/typing/package.json","hash":"1385399e3e0cd2b26d5ef7d888ff5cb465607053","modified":1739874619172},{"_id":"themes/typing/languages/default.yml","hash":"bd8e9329c5636b85bc554b76f06830269869864d","modified":1739874619168},{"_id":"themes/typing/languages/en-GB.yml","hash":"bd8e9329c5636b85bc554b76f06830269869864d","modified":1739874619168},{"_id":"themes/typing/languages/en-US.yml","hash":"bd8e9329c5636b85bc554b76f06830269869864d","modified":1739874619168},{"_id":"themes/typing/languages/en.yml","hash":"bd8e9329c5636b85bc554b76f06830269869864d","modified":1739874619168},{"_id":"themes/typing/languages/es-ES.yml","hash":"23dc21c62927062829e31fcfd6c5d2c7e9257844","modified":1739874619168},{"_id":"themes/typing/languages/es.yml","hash":"23dc21c62927062829e31fcfd6c5d2c7e9257844","modified":1739874619168},{"_id":"themes/typing/languages/fr-FR.yml","hash":"559b094ef6b9d02506c33044be8b50ebeda28a70","modified":1739874619168},{"_id":"themes/typing/languages/fr.yml","hash":"559b094ef6b9d02506c33044be8b50ebeda28a70","modified":1739874619168},{"_id":"themes/typing/languages/nl-NL.yml","hash":"95fc8003c34e1353f73f6315291d0cb10b5d7e73","modified":1739874619168},{"_id":"themes/typing/languages/nl.yml","hash":"95fc8003c34e1353f73f6315291d0cb10b5d7e73","modified":1739874619168},{"_id":"themes/typing/languages/ru-RU.yml","hash":"3d45b446862c8a305823533b868556f6111308fe","modified":1739874619168},{"_id":"themes/typing/languages/ru.yml","hash":"3d45b446862c8a305823533b868556f6111308fe","modified":1739874619168},{"_id":"themes/typing/languages/no.yml","hash":"53ba8ffd6353262138016bd1b4c3a65a113e6c52","modified":1739874619168},{"_id":"themes/typing/languages/zh-CN.yml","hash":"4f227318cce98303496e423d85de28b79fb01f00","modified":1739874619168},{"_id":"themes/typing/languages/zh-TW.yml","hash":"b68f12091eeae30b56847997d059f5ce29f086ac","modified":1739874619168},{"_id":"themes/typing/layout/archive.ejs","hash":"af4123c05bae34b147db2e716b18a8e92fb4153a","modified":1739874619172},{"_id":"themes/typing/layout/category.ejs","hash":"345fdcfe927456801a0ccd0eddfb67ca9895abfb","modified":1739874619172},{"_id":"themes/typing/layout/index.ejs","hash":"036780de9ac51546081c2c51feb7001f55807c89","modified":1739874619172},{"_id":"themes/typing/layout/layout.ejs","hash":"171311237a4b9959f29f348e9e33a9abb7c1111e","modified":1739874619172},{"_id":"themes/typing/layout/page.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1739874619172},{"_id":"themes/typing/layout/post.ejs","hash":"a05fd1a27e1c54c9dbab9e69a257a299b0f549cc","modified":1739874619172},{"_id":"themes/typing/layout/tag.ejs","hash":"276aef42425f73507a0953da08542cdcbce46f9c","modified":1739874619172},{"_id":"themes/typing/layout/_partial/after-footer.ejs","hash":"2fb5554fcff4f5684ef7e485f6ae654448d374df","modified":1739874619168},{"_id":"themes/typing/layout/_partial/archive-post.ejs","hash":"877b0b79538a63f1ae73407e372ee041f8b65e1b","modified":1739874619168},{"_id":"themes/typing/layout/_partial/archive.ejs","hash":"9665ed77377c8eb15d94c04a33905d26704f2e13","modified":1739874619168},{"_id":"themes/typing/layout/_partial/article.ejs","hash":"ce5b2c56d06024a34815dfa5a48f459216b9a917","modified":1739874619172},{"_id":"themes/typing/layout/_partial/baidu_tongji.ejs","hash":"998936b5bf3fcef3b2de5e21fe24e956afa43f59","modified":1739874619172},{"_id":"themes/typing/layout/_partial/footer.ejs","hash":"8ea44137c719e42312c18741be4e12529bb0d5c6","modified":1739874619172},{"_id":"themes/typing/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1739874619172},{"_id":"themes/typing/layout/_partial/google-analytics.ejs","hash":"87afd4173c7a3f45720987c42f0b8c537cdd08dc","modified":1739874619172},{"_id":"themes/typing/layout/_partial/head.ejs","hash":"962fae4b149c90c926b84c40ed5d6fac734e404a","modified":1739874619172},{"_id":"themes/typing/layout/_partial/header.ejs","hash":"c4a04beab6292751af254dabdf44efbca3e2e379","modified":1739874619172},{"_id":"themes/typing/source/css/donate.css","hash":"ddd86c23355b24bb3d36e6d16eb8af0f81aefbe7","modified":1739874619176},{"_id":"themes/typing/source/css/source.css","hash":"fb797bff1b809cf0b69753a9fd844a35b168c803","modified":1739874619176},{"_id":"themes/typing/source/css/typing.css","hash":"cb7808bd7b18caf955183a971ec68b342869c4dc","modified":1739874619176},{"_id":"themes/typing/source/images/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1739874619176},{"_id":"themes/typing/source/images/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1739874619176},{"_id":"themes/typing/source/images/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1739874619176},{"_id":"themes/typing/source/images/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1739874619176},{"_id":"themes/typing/source/images/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1739874619176},{"_id":"themes/typing/source/images/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1739874619180},{"_id":"themes/typing/source/js/typing.js","hash":"ed2783334ae217a40e1bc6b9464a198a738e7c5f","modified":1739874619180},{"_id":"themes/typing/layout/_partial/post/category.ejs","hash":"6cd9c85b105db04a74678d0a6c5440e51d9d84f7","modified":1739874619172},{"_id":"themes/typing/layout/_partial/post/date.ejs","hash":"955229856309eee00b6bd3374fa3e161b4c137e3","modified":1739874619172},{"_id":"themes/typing/layout/_partial/post/gallery.ejs","hash":"4c02fadc7a73087c1876b7809038444014195a98","modified":1739874619172},{"_id":"themes/typing/layout/_partial/post/nav.ejs","hash":"93e594128978c0e7310c9aef3e150effbf549f0e","modified":1739874619172},{"_id":"themes/typing/layout/_partial/post/tag.ejs","hash":"90209686eabc6c3e7a6a7ef2defd0b84611d9f41","modified":1739874619172},{"_id":"themes/typing/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1739874619172},{"_id":"themes/typing/preview/preview.png","hash":"33b39c8a626db45ee473ce3e3d0e37ebd9fb83d3","modified":1739874619176},{"_id":"themes/typing/preview/preview-dark-mode.png","hash":"4eaf8d046cf3e06373d93efcefb2ef126d9486cc","modified":1739874619176},{"_id":"public/images/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1739875309041},{"_id":"public/images/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1739875309041},{"_id":"public/images/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1739875309041},{"_id":"public/images/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1739875309041},{"_id":"public/images/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1739875309041},{"_id":"public/images/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1739875309041},{"_id":"public/css/donate.css","hash":"ddd86c23355b24bb3d36e6d16eb8af0f81aefbe7","modified":1739875309041},{"_id":"public/css/source.css","hash":"fb797bff1b809cf0b69753a9fd844a35b168c803","modified":1739875309041},{"_id":"public/js/typing.js","hash":"ed2783334ae217a40e1bc6b9464a198a738e7c5f","modified":1739875309041},{"_id":"public/css/typing.css","hash":"cb7808bd7b18caf955183a971ec68b342869c4dc","modified":1739875309041}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-02-18T08:53:44.327Z","updated":"2025-02-18T08:53:44.327Z","comments":1,"layout":"post","photos":[],"_id":"cm7a9apde0000e1y42wxm6mup","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"测试文章","date":"2025-02-18T09:08:33.000Z","_content":"\n\n---\n# **CS144: 计算机网络导论 2025年冬季**\n\n# check0：\n\n本次实验中大概四项任务：  \n\n1. 在电脑上安装GNU/Linux系统；  \n2. 手动执行网络任务（如获取网页、发送邮件）；  \n3. 用C++编写一个从互联网获取网页的小程序；  \n4. 实现网络的核心抽象之一：**内存中的可靠字节流**（在写入端和读取端之间）。\n\n## 1 配置GNU/Linux环境\n\n在这里我选择了腾讯云服务器，随便选了一个免费的。\n\n在云服务器中安装一大堆依赖：  \n\n```bash\nsudo apt update && sudo apt install git cmake gdb build-essential clang \\\nclang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark\n```\n\n注意到可以通过ssh连接本地，以便于通过vscode控制服务器，所以花了一部分时间配置ssh。\n\n在本地使用git bash的命令生成isa码。\n\n```bash\nssh-keygen -t rsa -C \"自己的邮箱\"\n```\n\n会在`~/.ssh/` 目录下生成 `id_rsa`（私钥）和 `id_rsa.pub`（公钥），私钥不用管，把公钥复制下来，在腾讯云服务器手动配置ssh。\n\n```bash\nmkdir -p ~/.ssh\necho \"你的公钥内容\" >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n```\n\n这样就可以保证服务器收到公钥后同意连接了。\n\n接下来是vscode的配置，通过配置本地的vscode，以保证vscode能正确的发送ssh请求。\n\n打开vscode后，`ctrl+shift+p`打开命令行，输入`remote ssh`，点打开ssh配置文件，会安装一堆插件，直接无脑安装即可\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190300944-1200574314.png)\n\n之后打开ssh配置文件，点第一个config文件。\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190248893-755240931.png)\n\n大概率config是空白，按以下格式输入就行。\n\n```\nHost tencent-cloud(这个地方随便输入啥都行)\n    HostName 114.514.0(自己服务器的公网ip地址)\n    User ubuntu(在服务器上输入whoami命令，会返回用户名)\n    Port 22\n```\n\n然后再点`ctrl+shift+p`就可以连接到主机了\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190329214-2023054758.png)\n\n---\n\n## 2 使用命令行上网\n\n   ### 2.1 获取网页\n\n   日常里，在浏览器我们可以直接输入 http://cs144.keithw.org/hello 以查看结果。  而现在，我们需要手动模拟浏览器的行为。\n\n   1. 在vscode终端中，运行以下命令，以连接服务器。\n\n      ```bash\n      telnet cs144.keithw.org http\n      ```\n\n      telnet实际上与ssh类似，都是一个实用的远程连接命令，该命令允许用本地计算机去连接cs144网页的服务器，我们在本地的命令可以在服务器上运行。\n\n      正常情况下，会得到以下执行结果：\n\n      ```bash\n      lighthouse@VM-16-14-ubuntu:~$ telnet cs144.keithw.org http\n      Trying 104.196.238.229...\n      Connected to cs144.keithw.org.\n      Escape character is '^]'.\n      ```\n\n      这条执行结果告诉我们连接上了cs144这个网站，`Escape character is '^]'.`是 `telnet` 的提示，表示我们可以按 `Ctrl + ]` 进入 `telnet` 的命令模式（退出、关闭连接等），我们暂时不用管。\n\n      依次输入：  \n\n      ```http\n      GET /hello HTTP/1.1\n      Host: cs144.keithw.org\n      Connection: close\n      ```\n\n      需要按两次回车，如果接收到以下响应，就表示请求成功了。  \n\n      ```http\n      HTTP/1.1 200 OK\n      Date: Mon, 10 Feb 2025 11:22:42 GMT\n      Server: Apache\n      Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT\n      ETag: \"e-57ce93446cb64\"\n      Accept-Ranges: bytes\n      Content-Length: 14\n      Connection: close\n      Content-Type: text/plain\n      \n      Hello, CS144!\n      Connection closed by foreign host.\n      \n      ```\n\n      我们来一行行观察一下这些命令：\n\n      - `GET /hello HTTP/1.1`\n\n        这行表示客户端向服务器发出了一个 `GET` 请求，请求资源 `/hello`。`GET` 是一种 HTTP 请求方法，表示客户端请求获取指定的资源\n\n      - `Host: cs144.keithw.org`\n\n        `Host` 表示目标服务器的主机名或域名。这里是 `cs144.keithw.org`，告诉服务器哪个虚拟主机处理请求\n\n      在相应部分中：\n\n      - ``HTTP/1.1 200 OK``: 表示 `/hello` 请求已成功处理。\n      - ``Content-Type: text/plain``: 表示返回的数据类型是纯文本（`text/plain`）。\n      - `Content-Length: 14`: 表示响应体的长度为 14 字节，意味着返回的内容长度是 14 字符。\n      - ``Hello, CS144!``: 这是响应体的内容，即服务器返回的数据。客户端请求 `/hello` 时，服务器返回了 `Hello, CS144!` 这段文本。\n\n      也就是说，这些指令等效于直接输入`cs144.keithw.org/hello`，而且可以得到`hello,cs144!`这段文本：\n\n      ![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190408084-926072557.png)\n\n      任务是手动获取URL `http://cs144.keithw.org/lab0/sunetid`（替换为你的SUNet ID），从响应头 `X-Your-Code-Is` 中提取密钥。\n\n      那我们只要修改`get`请求就好了\n\n      ```http\n      Host: cs144.keithw.org\n      Connection: close\n      \n      HTTP/1.1 200 OK\n      Date: Mon, 10 Feb 2025 11:50:10 GMT\n      Server: Apache\n      X-You-Said-Your-SunetID-Was: 114514\n      X-Your-Code-Is: 45573\n      Content-length: 110\n      Vary: Accept-Encoding\n      Connection: close\n      Content-Type: text/plain\n      \n      Hello! You told us that your SUNet ID was \"114514\". Please see the HTTP headers (above) for your secret code.\n      Connection closed by foreign host.\n      ```\n\n      \n\n   ### 2.2 给自己发送一封邮件\n\n   本小节要求使用**可靠字节传输流（reliable byte stream）**发送邮件给另一台电脑了，但是由于各个邮箱并没有给权限，且我们不是斯坦福大学学生，所以本小节是无法完成的。\n\n   1. 在原课程中，要求我们通过SSH登录Stanford网络：  \n\n      ```bash\n      telnet 148.163.153.234 smtp\n      ```\n\n   2. 按顺序输入SMTP命令：  \n\n      ```http\n      HELO mycomputer.stanford.edu\n      MAIL FROM: <sunetid@stanford.edu>\n      RCPT TO: <sunetid@stanford.edu>\n      DATA\n      From: sunetid@stanford.edu\n      To: sunetid@stanford.edu\n      Subject: Hello from CS144 Lab 0\n      QUIT\n      ```\n\n---\n\n   ### 2.3 监听与连接\n\n   上面两节或许让你对`telnet`有了理解：它是一个客户端程序，可以与其他计算机（服务器）程序建立连接，现在尝试成为服务器——等待客户端的连接程序。\n\n   1. **启动服务端**\n\n      在虚拟机的终端1运行 \n\n      ```bash\n      netcat -v -l -p 9090\n      ```\n\n      这是在终端1上启动一个监听端口为 `9090` 的服务端，使用 `netcat` (简称 `nc`) 工具来监听该端口。\n\n      - `-v` 是指启用详细模式（verbose），可以显示更多的调试信息。\n      - `-l` 表示让 `netcat` 进入监听模式，等待客户端连接。\n      - `-p 9090` 指定监听端口为 `9090`。\n\n      执行该命令后，你应该会看到类似于以下的输出：\n\n      ```bash\n      Listening on [0.0.0.0] (family 0, port 9090)\n      ```\n\n      这表明 `netcat` 正在监听端口 `9090`，等待客户端连接。\n\n   2. **启动客户端：**\n\n      在虚拟机上再打开一个终端2，如果是ssh连接的话就再打开一个vscode，运行： \n\n      ```bash\n      telnet localhost 9090\n      ```\n\n      这是在终端2上执行的命令，目的是连接到在终端1上运行的服务端。\n\n      - `localhost` 是指本地计算机的 IP 地址。\n      - `9090` 是前面指定的服务端口号。\n        使用 `telnet` 工具可以与监听端口建立连接，并进行简单的文本通信。\n\n      如果一切正常，你应该会看到类似的输出：\n\n      ```http\n      Trying 127.0.0.1...Connected to localhost.\n      Escape character is '^]'.\n      ```\n\n      这表明 `telnet` 成功连接到了服务端。\n\n   3. **进行双向通信**\n\n      在任意一个终端（客户端或服务端）键入内容，你会看到对方窗口立即显示你输入的内容。\n\n      例如，在 `telnet` 窗口中输入 `Hello`，然后按回车键，你会看到 `netcat` 服务端窗口会显示出 `Hello`，反之亦然。\n\n   4. **终止连接：**\n\n      在 `netcat` 端，按下 `Ctrl-C` 会结束服务端进程，连接将被关闭。此时，`telnet` 客户端也会自动断开连接并退出。\n\n      ```http\n      Connection closed by foreign host.\n      ```\n\n   由于是该过程是使用本地连接（`localhost`），所以整个过程不需要依赖外部网络。\n\n---\n\n   ## 3 使用流套接字（stream socket）编写网络程序\n\n   在本部分，你将写一个能通过互联网获取页面的简短程序，利用 Linux 内核和大多数其他操作系统提供的功能，以在两个程序之间创建可靠的双向字节流：一个程序在您的计算机上运行，另一个程序在另一台计算机上运行。\n\n   这个功能称之为“**流套接字**”（stream socket），无论是对于您的程序还是对服务器来说，套接字看起来像一个普通的文件描述符。当两个流套接字连接时，写入一个套接字的任何字节最终都会以相同的顺序从另一台计算机上的另一个套接字输出。\n\n   事实上，互联网并不会真正的提供可靠字节流连接，相反，互联网真正做的就是尽“最大努力”将短小的数据片段传送到目的地，这短小的数据片称之为`数据报`，而每个数据报都包含一些报头，它指定了源地址和目标地址等信息——它来自哪台计算机，要发送到哪台计算机——以及要传送到目标计算机的一些有效载荷数据（最多约 1,500 字节）。\n\n   尽管互联网是尽力传送每个数据报，但数据报依然会：\n\n   - 丢失\n   - 无序传送\n   - 传送时内容发生更改\n   - 重复传送和多次传送\n\n   因此，将“**尽力而为的数据报**”转换为“**可靠字节流**”实际是两端的操作系统通常负责。\n\n   两台计算机必须合作，以确保流中的每个字节传送到另一端的流套接字时都能在正确位置。它们还必须告诉对方它们准备从另一台计算机接收多少数据，并确保发送的数据不超过另一端愿意接受的数据。所有这些都是使用 1981 年制定的约定方案完成的，该方案称为**`传输控制协议 (TCP)`**。\n\n   在本lab中，我们将编写一个名为“webget”的程序，该程序创建 TCP 流套接字、连接到 Web 服务器并获取页面——请注意，这个过程依赖于操作系统内部的 **TCP/IP 协议栈**，我们只是调用系统提供的 **socket API**，而不需要自己管理数据包的可靠传输、重传、流量控制等底层细节。因此，我们只是站在 TCP 之上的**应用层**操作，比如建立连接、发送 HTTP 请求、接收数据，不过，在未来的lab中，我们会通过自己实现**TCP**来从不太可靠的数据报中创建可靠的字节流。\n\n   ### 3.1 配置代码仓库\n\n   1. 我们使用名为“**Minnow**“的代码库，在虚拟机上执行：  \n\n      ```bash\n      git clone git@github.com:CS144/minnow.git\n      cd minnow\n      ```\n\n      在GitHub创建**私有仓库**“minnow”，并添加协作者 `cs144-grader`（用以评分）\n\n   2. 关联本地与远程仓库：  \n\n      ```bash\n      git remote add github git@github.com:username/minnow.git\n      git push github\n      ```\n\n      - **`git remote add`**：添加一个远程仓库（remote repository）。\n\n      - **`github`**：这是你为这个远程仓库取的名字，后续 `git push github` 会用到它。\n\n      - **`git@github.com:username/minnow.git`**：使用**SSH**连接**GitHub**，`username` 需要替换成你的 GitHub 用户名。\n\n      这样就能让本地的 Git 仓库知道远程 GitHub 仓库的存在，并建立联系。之后，就可以使用 `git push` 和 `git pull` 与 GitHub 交互。\n\n      我们可以使用一行命令来查看连接结果：\n\n      ```bash\n      git remote -v\n      ```\n\n      如果出现了以下结果：\n\n      ```bash\n      lighthouse@VM-16-14-ubuntu:~/minnow$ git remote -v\n      github  git@github.com:seekerzhz/minnow.git (fetch)\n      github  git@github.com:seekerzhz/minnow.git (push)\n      origin  git@github.com:CS144/minnow.git (fetch)\n      origin  git@github.com:CS144/minnow.git (push)\n      ```\n\n      就说明连接成功了。\n\n---\n\n   ### 3.2 编译代码\n\n   ```bash\ncmake -S . -B build\ncmake --build build\n   ```\n\n   在执行第一条命令的时候，可能出现如下结果：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake -S . -B build\nCMake Error at CMakeLists.txt:1 (cmake_minimum_required):\n  CMake 3.24.2 or higher is required.  You are running version 3.22.1\n\n\n-- Configuring incomplete, errors occurred!\n   ```\n\n   cmake版本太低了，我们查看一下cmake的版本：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version\n\ncmake version 3.22.1\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n   ```\n\n   毕竟是kitware提供的，即便我们执行更新指令也没有办法更新，所以我们可以从snap更新cmake：\n\n   ```bash\nsudo snap install cmake --classic\n   ```\n\n   只是会出现这种情况：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ sudo snap install cmake --classic\n\ncmake 3.31.5 from Crascit✓ installed\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version\ncmake version 3.22.1\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\nlighthouse@VM-16-14-ubuntu:~/minnow$ which cmake\n/usr/bin/cmake\n   ```\n\n   虽然更新了，但cmake用的还是user/bin的cmake，我们只要改一下路径，手动将 `/usr/bin/cmake` 替换为 Snap 版本：\n\n   ```bash\nsudo ln -sf /snap/bin/cmake /usr/bin/cmake\n   ```\n\n   然后再次运行：\n\n   ```bash\ncmake --version\n   ```\n\n   此时应该会显示 **3.31.5**。\n\n   `cmake -S . -B build`\n\n   - `-S .`：指定 **源代码** 目录为当前目录 (`.`)。\n   - `-B build`：指定 **构建目录** 为 `build`，所有编译文件会存放在这个 `build` 目录中，而不会污染源代码目录。\n\n   执行后， `build/` 目录被创建，其中包含 CMake 生成的构建文件。\n\n   同时，在执行`cmake --build build`的时候也会出现问题\n\n   ```bash\n-- Building in 'Debug' mode.\n-- Configuring done (0.2s)\n-- Generating done (0.3s)\n-- Build files have been written to: /home/lighthouse/minnow/build\n[  5%] Building CXX object util/CMakeFiles/util_debug.dir/debug.cc.o\n[ 21%] Built target minnow_debug\n[ 26%] Building CXX object tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o\nIn file included from /home/lighthouse/minnow/util/debug.cc:1:\n/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory\n    3 | #include <format>\n      |          ^~~~~~~~\ncompilation terminated.\nmake[2]: *** [util/CMakeFiles/util_debug.dir/build.make:93: util/CMakeFiles/util_debug.dir/debug.cc.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:2786: util/CMakeFiles/util_debug.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\nIn file included from /home/lighthouse/minnow/tests/common.hh:4,\n                 from /home/lighthouse/minnow/tests/common.cc:1:\n/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory\n    3 | #include <format>\n      |          ^~~~~~~~\ncompilation terminated.\nmake[2]: *** [tests/CMakeFiles/minnow_testing_debug.dir/build.make:79: tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:2978: tests/CMakeFiles/minnow_testing_debug.dir/all] Error 2\nmake: *** [Makefile:101: all] Error 2\n   ```\n\n   你妈的，没有**format**库啊。**format**是cpp20新增的特性，这时候应该更新gcc了\n\n   **添加 Ubuntu 官方的 GCC PPA**（这是一个提供更新版本的包源）：\n\n   ```bash\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test\nsudo apt update\n   ```\n\n   **安装新版本的 GCC**，至少是GCC 13才支持format。\n\n   ```bash\nsudo apt install gcc-13 g++-13\n   ```\n\n   **切换到安装的 GCC 版本**：\n\n   ```bash\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13\nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13\n   ```\n\n   **验证是否成功切换**：\n\n   ```bash\ngcc --version\n   ```\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ gcc --version\ngcc (Ubuntu 13.1.0-8ubuntu1~22.04) 13.1.0\nCopyright (C) 2023 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n   ```\n\n   ok了。\n\n   ### 3.3 现代C++编程规范\n\n   CS144是一个以编程为主的课程。实验作业使用现代C++的编程风格，采用2011年及以后的新特性，目标是让代码尽可能安全。这种风格与之前的C++编程方式有所不同。更多相关信息可以参考[C++核心指南](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines)。\n\n   我们的基本目标是：确保每个对象的公共接口尽可能小，内部进行严格的安全检查，避免错误使用，并能在不需要时自动清理自己。我们希望避免需要手动配对的操作（例如：`malloc/free` 或 `new/delete`），因为会发生操作没有正确配对（例如：函数提前返回或抛出异常）。所以，我们希望通过构造函数来完成资源的初始化，并在析构函数中自动清理资源。这种做法叫做“资源获取即初始化”（RAII，**R**esource **A**cquisition **I**s **I**nitialization）。\n\n   **我们需要遵循以下规则：**\n\n   - 使用官方的C++文档（https://en.cppreference.com）作为参考。（不建议使用 `cplusplus.com`，因为它可能已经过时。）\n   - **永远不要使用 `malloc()` 或 `free()`**。\n   - **永远不要使用 `new` 或 `delete`**。\n   - **尽量避免使用原始指针（`*`）**，仅在绝对必要时才使用智能指针（`unique_ptr` 或 `shared_ptr`）。在这门课程中不需要这些。\n   - 避免使用模板、线程、锁和虚函数。在这门课程中也不需要这些。\n   - **避免使用 C 风格的字符串（如 `char *str`）和字符串函数（如 `strlen()`、`strcpy()`）**，这些容易出错。尽量使用 `std::string` 来处理字符串。\n   - **不要使用 C 风格的强制类型转换（如 `(FILE *)x`）**，如果需要转换类型，使用 C++ 的 `static_cast`（不过在这门课中你通常不需要这么做）。\n   - 优先使用常量引用（`const`）来传递函数参数，例如：`const Address &address`。\n   - **让每个变量都成为常量（`const`），除非必须修改它**。\n   - **让每个方法都成为常量（`const`），除非方法需要修改对象**。\n   - **避免使用全局变量**，并尽可能缩小每个变量的作用范围。\n   - 在提交作业之前，请运行 `cmake --build build --target tidy` 来查看代码中可以改进的地方，运行 `cmake --build build --target format` 来统一格式。\n\n   **关于使用 Git：**\n\n   实验作业是通过 Git（版本控制工具）进行分发的。Git 可以帮助记录你做过的所有更改，便于调试和追踪代码的历史。我们建议你在编写代码时，频繁进行小的提交，并且每次提交时都要写清楚修改了什么，以及为什么做这个修改。理想情况下，每次提交后，代码应该可以正常编译，并且随着时间的推移，测试逐渐通过。频繁的小提交有助于调试（因为每次提交都会编译，而且提交信息清晰地说明了修改的目的），同时也能防止出现作弊的嫌疑，因为你可以清楚地看到自己在每个阶段的进展。这也会帮助你在未来的编程职业中更好地管理代码。\n\n   评分人员会根据你的 Git 提交记录，了解你是如何逐步完成实验的。如果你不懂如何使用 Git，可以向 CS144 办公室寻求帮助，或查看一些 Git 教程（例如：https://guides.github.com/introduction/git-handbook）。最后，请确保将代码提交到一个私有的 GitHub 仓库，确保代码不会公开访问。\n\n   再次强调：在工作过程中，**要频繁进行小的提交**，并写清楚每次提交的修改内容和原因。\n\n---\n\n   ### **3.4 阅读 Minnow 支持代码**\n\n   为了支持这种编程风格，Minnow 的类将操作系统函数（可以通过 C 调用）封装在“现代”C++中。我们为一些你应该在 CS 111 课程中熟悉的概念提供了 C++ 封装，特别是套接字和文件描述符。\n\n   阅读 `util/socket.hh` 和 `util/file descriptor.hh` 文件中的`public`接口部分（即文件中“public:”之后的内容）。需要注意的是，`Socket` 是 `FileDescriptor` 类型的一种，`TCPSocket` 是 `Socket` 类型的一种。\n\n### **3.5 编写 webget**\n\n   现在是时候实现 `webget` 程序了，它将通过操作系统的 TCP 支持和流套接字抽象来获取网页——在本实验中之前，我们曾手动发送了一些请求，现在我们需要用`cpp`程序代替他们。\n\n1. 从构建目录中，使用文本编辑器或 IDE 打开 `../apps/webget.cc` 文件。\n\n2. 在 `get_URL` 函数中，按照文件中描述的方式实现一个简单的 Web 客户端，使用你之前使用过的 HTTP 请求格式，用上 `TCPSocket` 和 `Address` 类。\n\n   首先看一看`get_URL`的样子：\n\n   ```cpp\n   void get_URL( const string& host, const string& path )\n   {\n     cerr << \"Function called: get_URL(\" << host << \", \" << path << \")\\n\";\n     cerr << \"Warning: get_URL() has not been implemented yet.\\n\";\n   }\n   ```\n\n   参数`host`和`path`是什么？——我们不妨回忆一下之手动发送的HTTP请求：\n\n   ```http\n   GET /lab0 HTTP/1.1\n   Host: cs144.keithw.org\n   Connection: close\n   ```\n\n   `host`是我们要访问的地址，\n\n​\t在 HTTP 请求中，每一行都必须以 “\\r\\n” 结束（仅使用“\\n”或 `endl` 是不够的）。同时在请求中，包含了 `Connection: close` 这一行，这告诉服务器，在处理完当前请求后，客户端不会再发送任何请求。服务器会发送一个响应后立即关闭与客户端的连接。你将通过检测“EOF”（文件结束）来知道服务器已经完成了响应，因为当服务器的字节流完全传输完毕时，你的套接字会到达 EOF。因此，我们必须确保从服务器读取并打印所有输出，直到套接字达到“EOF”（文件结束）——单次调用 `read` 是不够的。我们预计你大约需要写 10 行代码。\n\n通过运行 `cmake --build build .` 编译程序。\n\n3. 通过运行 `./apps/webget cs144.keithw.org /hello` 来测试你的程序。试试看你从浏览器访问 `http://cs144.keithw.org/hello` 时的结果和程序输出有什么区别？它与第 2.1 节的结果有何不同？你可以自由尝试——测试任何 HTTP URL！\n\n4. 当程序似乎正常工作时，运行 `cmake --build build --target check_webget`来运行自动化测试。在实现`get_URL` 函数之前，你应该看到如下输出：\n\n```bash\ncmake --build build --target check_webget\nTest project /home/cs144/minnow/build\nStart 1: compile with bug-checkers\n1/2 Test #1: compile with bug-checkers ........ Passed 1.02 sec\nStart 2: t_webget\n2/2 Test #2: t_webget .........................***Failed 0.01 sec\nFunction called: get_URL(cs144.keithw.org, /nph-hasher/xyzzy)\nWarning: get_URL() has not been implemented yet.\nERROR: webget returned output that did not match the test's expectations\n```\n\n完成作业后，你应该看到：\n\n```bash\ncmake --build build --target check_webget\nTest project /home/cs144/minnow/build\nStart 1: compile with bug-checkers\n1/2 Test #1: compile with bug-checkers ........ Passed 1.09 sec\nStart 2: t_webget\n2/2 Test #2: t_webget ......................... Passed 0.72 sec\n100% tests passed, 0 tests failed out of 2\n```\n\n      1. 评分人员将使用与你的单元测试不同的主机名和路径来运行你的 `webget` 程序，因此请确保它不仅能在单元测试使用的主机名和路径上运行。\n\n   ## 4 内存中的可靠字节流\n\n   到目前为止，你已经看到如何通过可靠字节流的抽象来进行网络通信，尽管互联网本身只提供“尽力而为”（不可靠）的数据报服务。\n\n   在本周实验的最后，你将实现一个对象，它在单台计算机的内存中提供这个抽象（你可能在 CS 110/111 中做过类似的工作）。字节被写入“输入”端，并可以按相同的顺序从“输出”端读取。字节流是有限的：写入方可以结束输入，之后不能再写入字节。当读者读取到流的末尾时，它将遇到“EOF”（文件结束），并且不能再读取字节。你的字节流还将进行流量控制，以限制其在任何给定时刻的内存消耗。该对象初始化时会设置一个“容量”，即它在任何给定时刻愿意存储的最大字节数。字节流将限制写入方在任何给定时刻的写入量，以确保流不会超出其存储容量。当读者读取字节并将其从流中移除时，写入方才可以继续写入。\n\n   请注意：字节流是有限的，但在写入方结束输入并完成流之前，它几乎可以是任意长的。你的实现必须能够处理远远超过容量的流。容量限制的是当前时刻内存中存储的字节数（即已写入但尚未读取的字节数），但并不限制流的长度。一个容量仅为一个字节的对象仍然可以承载一个长达数TB的流，只要写入方一次只写一个字节，且读取方在写入方允许写入下一个字节之前读取完每个字节。\n\n   以下是写入方的接口：\n\n   ```cpp\nvoid push(std::string data); // 向流中推送数据，但仅限于可用容量允许的字节数。\nvoid close(); // 表示流已经结束，之后不能再写入。\nbool is_closed() const; // 流是否已经关闭？\nuint64_t available_capacity() const; // 当前可以写入多少字节？\nuint64_t bytes_pushed() const; // 总共推送到流中的字节数\n   ```\n\n   以下是读取方的接口：\n\n   ```cpp\nstd::string_view peek() const; // 查看缓冲区中的下一个字节\nvoid pop(uint64_t len); // 从缓冲区中移除 `len` 字节\nbool is_finished() const; // 流是否已经完成（已关闭且完全被读取）？\nbool has_error() const; // 流是否发生了错误？\nuint64_t bytes_buffered() const; // 当前缓冲的字节数（已推送但未读取）\nuint64_t bytes_popped() const; // 总共从流中移除的字节数\n   ```\n\n   打开 `src/byte_stream.hh` 和 `src/byte_stream.cc` 文件，并实现提供此接口的对象。在开发字节流实现时，你可以通过运行 `cmake --build build --target check0` 来运行自动化测试。\n\n   如果所有测试通过，`check0` 测试将会运行一个速度基准测试。对于这门课程，只要你的实现速度超过 0.1 Gbit/s（即每秒 1 亿比特），对于三种 `pop` 长度的测试而言就是合格的。（实现速度可能会超过 10 Gbit/s，但这取决于你的计算机速度，并不是必需的。）\n\n   **接下来做什么？** 在接下来的四周里，你将实现一个系统，提供相同的接口，但不是在内存中，而是通过不可靠传输的网络层，这就是传输控制协议（TCP）——这是世界上最普遍使用的计算机程序。\n\n------\n\n## 5 提交\n\n请注意以下几点\n\n   - 在提交时，请只修改 `webget.cc` 和 `src` 目录下的源代码（`byte_stream.hh` 和 `byte_stream.cc`）。请不要修改任何测试代码或 `util` 中的辅助代码。\n\n   - 记得在编写代码时进行小的提交，并写出清晰的提交消息。每次提交后，记得将你的 VM 仓库备份到私有的 GitHub 仓库中，方法是运行 `git push github`。你的代码需要被提交并推送到 GitHub，才能进行评分。\n\n   - 提交作业前，请按以下顺序执行：\n\n     (a) 确保所有更改都已提交到 Git 仓库。你可以运行 `git status` 来确保没有未提交的更改。记住：在编码时进行小的提交。 \n\n     (b) 运行 `cmake --build build --target format` （以规范代码风格）\n\n     (c) 运行 `cmake --build build --target check0` （确保自动化测试通过）\n\n     (d) 可选：运行 `cmake --build build --target tidy` （建议改进以遵循良好的 C++ 编程实践）","source":"_posts/测试文章.md","raw":"---\ntitle: 测试文章\ndate: 2025-02-18 17:08:33\ntags: 开发\n---\n\n\n---\n# **CS144: 计算机网络导论 2025年冬季**\n\n# check0：\n\n本次实验中大概四项任务：  \n\n1. 在电脑上安装GNU/Linux系统；  \n2. 手动执行网络任务（如获取网页、发送邮件）；  \n3. 用C++编写一个从互联网获取网页的小程序；  \n4. 实现网络的核心抽象之一：**内存中的可靠字节流**（在写入端和读取端之间）。\n\n## 1 配置GNU/Linux环境\n\n在这里我选择了腾讯云服务器，随便选了一个免费的。\n\n在云服务器中安装一大堆依赖：  \n\n```bash\nsudo apt update && sudo apt install git cmake gdb build-essential clang \\\nclang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark\n```\n\n注意到可以通过ssh连接本地，以便于通过vscode控制服务器，所以花了一部分时间配置ssh。\n\n在本地使用git bash的命令生成isa码。\n\n```bash\nssh-keygen -t rsa -C \"自己的邮箱\"\n```\n\n会在`~/.ssh/` 目录下生成 `id_rsa`（私钥）和 `id_rsa.pub`（公钥），私钥不用管，把公钥复制下来，在腾讯云服务器手动配置ssh。\n\n```bash\nmkdir -p ~/.ssh\necho \"你的公钥内容\" >> ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n```\n\n这样就可以保证服务器收到公钥后同意连接了。\n\n接下来是vscode的配置，通过配置本地的vscode，以保证vscode能正确的发送ssh请求。\n\n打开vscode后，`ctrl+shift+p`打开命令行，输入`remote ssh`，点打开ssh配置文件，会安装一堆插件，直接无脑安装即可\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190300944-1200574314.png)\n\n之后打开ssh配置文件，点第一个config文件。\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190248893-755240931.png)\n\n大概率config是空白，按以下格式输入就行。\n\n```\nHost tencent-cloud(这个地方随便输入啥都行)\n    HostName 114.514.0(自己服务器的公网ip地址)\n    User ubuntu(在服务器上输入whoami命令，会返回用户名)\n    Port 22\n```\n\n然后再点`ctrl+shift+p`就可以连接到主机了\n\n![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190329214-2023054758.png)\n\n---\n\n## 2 使用命令行上网\n\n   ### 2.1 获取网页\n\n   日常里，在浏览器我们可以直接输入 http://cs144.keithw.org/hello 以查看结果。  而现在，我们需要手动模拟浏览器的行为。\n\n   1. 在vscode终端中，运行以下命令，以连接服务器。\n\n      ```bash\n      telnet cs144.keithw.org http\n      ```\n\n      telnet实际上与ssh类似，都是一个实用的远程连接命令，该命令允许用本地计算机去连接cs144网页的服务器，我们在本地的命令可以在服务器上运行。\n\n      正常情况下，会得到以下执行结果：\n\n      ```bash\n      lighthouse@VM-16-14-ubuntu:~$ telnet cs144.keithw.org http\n      Trying 104.196.238.229...\n      Connected to cs144.keithw.org.\n      Escape character is '^]'.\n      ```\n\n      这条执行结果告诉我们连接上了cs144这个网站，`Escape character is '^]'.`是 `telnet` 的提示，表示我们可以按 `Ctrl + ]` 进入 `telnet` 的命令模式（退出、关闭连接等），我们暂时不用管。\n\n      依次输入：  \n\n      ```http\n      GET /hello HTTP/1.1\n      Host: cs144.keithw.org\n      Connection: close\n      ```\n\n      需要按两次回车，如果接收到以下响应，就表示请求成功了。  \n\n      ```http\n      HTTP/1.1 200 OK\n      Date: Mon, 10 Feb 2025 11:22:42 GMT\n      Server: Apache\n      Last-Modified: Thu, 13 Dec 2018 15:45:29 GMT\n      ETag: \"e-57ce93446cb64\"\n      Accept-Ranges: bytes\n      Content-Length: 14\n      Connection: close\n      Content-Type: text/plain\n      \n      Hello, CS144!\n      Connection closed by foreign host.\n      \n      ```\n\n      我们来一行行观察一下这些命令：\n\n      - `GET /hello HTTP/1.1`\n\n        这行表示客户端向服务器发出了一个 `GET` 请求，请求资源 `/hello`。`GET` 是一种 HTTP 请求方法，表示客户端请求获取指定的资源\n\n      - `Host: cs144.keithw.org`\n\n        `Host` 表示目标服务器的主机名或域名。这里是 `cs144.keithw.org`，告诉服务器哪个虚拟主机处理请求\n\n      在相应部分中：\n\n      - ``HTTP/1.1 200 OK``: 表示 `/hello` 请求已成功处理。\n      - ``Content-Type: text/plain``: 表示返回的数据类型是纯文本（`text/plain`）。\n      - `Content-Length: 14`: 表示响应体的长度为 14 字节，意味着返回的内容长度是 14 字符。\n      - ``Hello, CS144!``: 这是响应体的内容，即服务器返回的数据。客户端请求 `/hello` 时，服务器返回了 `Hello, CS144!` 这段文本。\n\n      也就是说，这些指令等效于直接输入`cs144.keithw.org/hello`，而且可以得到`hello,cs144!`这段文本：\n\n      ![](https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190408084-926072557.png)\n\n      任务是手动获取URL `http://cs144.keithw.org/lab0/sunetid`（替换为你的SUNet ID），从响应头 `X-Your-Code-Is` 中提取密钥。\n\n      那我们只要修改`get`请求就好了\n\n      ```http\n      Host: cs144.keithw.org\n      Connection: close\n      \n      HTTP/1.1 200 OK\n      Date: Mon, 10 Feb 2025 11:50:10 GMT\n      Server: Apache\n      X-You-Said-Your-SunetID-Was: 114514\n      X-Your-Code-Is: 45573\n      Content-length: 110\n      Vary: Accept-Encoding\n      Connection: close\n      Content-Type: text/plain\n      \n      Hello! You told us that your SUNet ID was \"114514\". Please see the HTTP headers (above) for your secret code.\n      Connection closed by foreign host.\n      ```\n\n      \n\n   ### 2.2 给自己发送一封邮件\n\n   本小节要求使用**可靠字节传输流（reliable byte stream）**发送邮件给另一台电脑了，但是由于各个邮箱并没有给权限，且我们不是斯坦福大学学生，所以本小节是无法完成的。\n\n   1. 在原课程中，要求我们通过SSH登录Stanford网络：  \n\n      ```bash\n      telnet 148.163.153.234 smtp\n      ```\n\n   2. 按顺序输入SMTP命令：  \n\n      ```http\n      HELO mycomputer.stanford.edu\n      MAIL FROM: <sunetid@stanford.edu>\n      RCPT TO: <sunetid@stanford.edu>\n      DATA\n      From: sunetid@stanford.edu\n      To: sunetid@stanford.edu\n      Subject: Hello from CS144 Lab 0\n      QUIT\n      ```\n\n---\n\n   ### 2.3 监听与连接\n\n   上面两节或许让你对`telnet`有了理解：它是一个客户端程序，可以与其他计算机（服务器）程序建立连接，现在尝试成为服务器——等待客户端的连接程序。\n\n   1. **启动服务端**\n\n      在虚拟机的终端1运行 \n\n      ```bash\n      netcat -v -l -p 9090\n      ```\n\n      这是在终端1上启动一个监听端口为 `9090` 的服务端，使用 `netcat` (简称 `nc`) 工具来监听该端口。\n\n      - `-v` 是指启用详细模式（verbose），可以显示更多的调试信息。\n      - `-l` 表示让 `netcat` 进入监听模式，等待客户端连接。\n      - `-p 9090` 指定监听端口为 `9090`。\n\n      执行该命令后，你应该会看到类似于以下的输出：\n\n      ```bash\n      Listening on [0.0.0.0] (family 0, port 9090)\n      ```\n\n      这表明 `netcat` 正在监听端口 `9090`，等待客户端连接。\n\n   2. **启动客户端：**\n\n      在虚拟机上再打开一个终端2，如果是ssh连接的话就再打开一个vscode，运行： \n\n      ```bash\n      telnet localhost 9090\n      ```\n\n      这是在终端2上执行的命令，目的是连接到在终端1上运行的服务端。\n\n      - `localhost` 是指本地计算机的 IP 地址。\n      - `9090` 是前面指定的服务端口号。\n        使用 `telnet` 工具可以与监听端口建立连接，并进行简单的文本通信。\n\n      如果一切正常，你应该会看到类似的输出：\n\n      ```http\n      Trying 127.0.0.1...Connected to localhost.\n      Escape character is '^]'.\n      ```\n\n      这表明 `telnet` 成功连接到了服务端。\n\n   3. **进行双向通信**\n\n      在任意一个终端（客户端或服务端）键入内容，你会看到对方窗口立即显示你输入的内容。\n\n      例如，在 `telnet` 窗口中输入 `Hello`，然后按回车键，你会看到 `netcat` 服务端窗口会显示出 `Hello`，反之亦然。\n\n   4. **终止连接：**\n\n      在 `netcat` 端，按下 `Ctrl-C` 会结束服务端进程，连接将被关闭。此时，`telnet` 客户端也会自动断开连接并退出。\n\n      ```http\n      Connection closed by foreign host.\n      ```\n\n   由于是该过程是使用本地连接（`localhost`），所以整个过程不需要依赖外部网络。\n\n---\n\n   ## 3 使用流套接字（stream socket）编写网络程序\n\n   在本部分，你将写一个能通过互联网获取页面的简短程序，利用 Linux 内核和大多数其他操作系统提供的功能，以在两个程序之间创建可靠的双向字节流：一个程序在您的计算机上运行，另一个程序在另一台计算机上运行。\n\n   这个功能称之为“**流套接字**”（stream socket），无论是对于您的程序还是对服务器来说，套接字看起来像一个普通的文件描述符。当两个流套接字连接时，写入一个套接字的任何字节最终都会以相同的顺序从另一台计算机上的另一个套接字输出。\n\n   事实上，互联网并不会真正的提供可靠字节流连接，相反，互联网真正做的就是尽“最大努力”将短小的数据片段传送到目的地，这短小的数据片称之为`数据报`，而每个数据报都包含一些报头，它指定了源地址和目标地址等信息——它来自哪台计算机，要发送到哪台计算机——以及要传送到目标计算机的一些有效载荷数据（最多约 1,500 字节）。\n\n   尽管互联网是尽力传送每个数据报，但数据报依然会：\n\n   - 丢失\n   - 无序传送\n   - 传送时内容发生更改\n   - 重复传送和多次传送\n\n   因此，将“**尽力而为的数据报**”转换为“**可靠字节流**”实际是两端的操作系统通常负责。\n\n   两台计算机必须合作，以确保流中的每个字节传送到另一端的流套接字时都能在正确位置。它们还必须告诉对方它们准备从另一台计算机接收多少数据，并确保发送的数据不超过另一端愿意接受的数据。所有这些都是使用 1981 年制定的约定方案完成的，该方案称为**`传输控制协议 (TCP)`**。\n\n   在本lab中，我们将编写一个名为“webget”的程序，该程序创建 TCP 流套接字、连接到 Web 服务器并获取页面——请注意，这个过程依赖于操作系统内部的 **TCP/IP 协议栈**，我们只是调用系统提供的 **socket API**，而不需要自己管理数据包的可靠传输、重传、流量控制等底层细节。因此，我们只是站在 TCP 之上的**应用层**操作，比如建立连接、发送 HTTP 请求、接收数据，不过，在未来的lab中，我们会通过自己实现**TCP**来从不太可靠的数据报中创建可靠的字节流。\n\n   ### 3.1 配置代码仓库\n\n   1. 我们使用名为“**Minnow**“的代码库，在虚拟机上执行：  \n\n      ```bash\n      git clone git@github.com:CS144/minnow.git\n      cd minnow\n      ```\n\n      在GitHub创建**私有仓库**“minnow”，并添加协作者 `cs144-grader`（用以评分）\n\n   2. 关联本地与远程仓库：  \n\n      ```bash\n      git remote add github git@github.com:username/minnow.git\n      git push github\n      ```\n\n      - **`git remote add`**：添加一个远程仓库（remote repository）。\n\n      - **`github`**：这是你为这个远程仓库取的名字，后续 `git push github` 会用到它。\n\n      - **`git@github.com:username/minnow.git`**：使用**SSH**连接**GitHub**，`username` 需要替换成你的 GitHub 用户名。\n\n      这样就能让本地的 Git 仓库知道远程 GitHub 仓库的存在，并建立联系。之后，就可以使用 `git push` 和 `git pull` 与 GitHub 交互。\n\n      我们可以使用一行命令来查看连接结果：\n\n      ```bash\n      git remote -v\n      ```\n\n      如果出现了以下结果：\n\n      ```bash\n      lighthouse@VM-16-14-ubuntu:~/minnow$ git remote -v\n      github  git@github.com:seekerzhz/minnow.git (fetch)\n      github  git@github.com:seekerzhz/minnow.git (push)\n      origin  git@github.com:CS144/minnow.git (fetch)\n      origin  git@github.com:CS144/minnow.git (push)\n      ```\n\n      就说明连接成功了。\n\n---\n\n   ### 3.2 编译代码\n\n   ```bash\ncmake -S . -B build\ncmake --build build\n   ```\n\n   在执行第一条命令的时候，可能出现如下结果：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake -S . -B build\nCMake Error at CMakeLists.txt:1 (cmake_minimum_required):\n  CMake 3.24.2 or higher is required.  You are running version 3.22.1\n\n\n-- Configuring incomplete, errors occurred!\n   ```\n\n   cmake版本太低了，我们查看一下cmake的版本：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version\n\ncmake version 3.22.1\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\n   ```\n\n   毕竟是kitware提供的，即便我们执行更新指令也没有办法更新，所以我们可以从snap更新cmake：\n\n   ```bash\nsudo snap install cmake --classic\n   ```\n\n   只是会出现这种情况：\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ sudo snap install cmake --classic\n\ncmake 3.31.5 from Crascit✓ installed\nlighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version\ncmake version 3.22.1\n\nCMake suite maintained and supported by Kitware (kitware.com/cmake).\nlighthouse@VM-16-14-ubuntu:~/minnow$ which cmake\n/usr/bin/cmake\n   ```\n\n   虽然更新了，但cmake用的还是user/bin的cmake，我们只要改一下路径，手动将 `/usr/bin/cmake` 替换为 Snap 版本：\n\n   ```bash\nsudo ln -sf /snap/bin/cmake /usr/bin/cmake\n   ```\n\n   然后再次运行：\n\n   ```bash\ncmake --version\n   ```\n\n   此时应该会显示 **3.31.5**。\n\n   `cmake -S . -B build`\n\n   - `-S .`：指定 **源代码** 目录为当前目录 (`.`)。\n   - `-B build`：指定 **构建目录** 为 `build`，所有编译文件会存放在这个 `build` 目录中，而不会污染源代码目录。\n\n   执行后， `build/` 目录被创建，其中包含 CMake 生成的构建文件。\n\n   同时，在执行`cmake --build build`的时候也会出现问题\n\n   ```bash\n-- Building in 'Debug' mode.\n-- Configuring done (0.2s)\n-- Generating done (0.3s)\n-- Build files have been written to: /home/lighthouse/minnow/build\n[  5%] Building CXX object util/CMakeFiles/util_debug.dir/debug.cc.o\n[ 21%] Built target minnow_debug\n[ 26%] Building CXX object tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o\nIn file included from /home/lighthouse/minnow/util/debug.cc:1:\n/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory\n    3 | #include <format>\n      |          ^~~~~~~~\ncompilation terminated.\nmake[2]: *** [util/CMakeFiles/util_debug.dir/build.make:93: util/CMakeFiles/util_debug.dir/debug.cc.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:2786: util/CMakeFiles/util_debug.dir/all] Error 2\nmake[1]: *** Waiting for unfinished jobs....\nIn file included from /home/lighthouse/minnow/tests/common.hh:4,\n                 from /home/lighthouse/minnow/tests/common.cc:1:\n/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory\n    3 | #include <format>\n      |          ^~~~~~~~\ncompilation terminated.\nmake[2]: *** [tests/CMakeFiles/minnow_testing_debug.dir/build.make:79: tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o] Error 1\nmake[1]: *** [CMakeFiles/Makefile2:2978: tests/CMakeFiles/minnow_testing_debug.dir/all] Error 2\nmake: *** [Makefile:101: all] Error 2\n   ```\n\n   你妈的，没有**format**库啊。**format**是cpp20新增的特性，这时候应该更新gcc了\n\n   **添加 Ubuntu 官方的 GCC PPA**（这是一个提供更新版本的包源）：\n\n   ```bash\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test\nsudo apt update\n   ```\n\n   **安装新版本的 GCC**，至少是GCC 13才支持format。\n\n   ```bash\nsudo apt install gcc-13 g++-13\n   ```\n\n   **切换到安装的 GCC 版本**：\n\n   ```bash\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13\nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13\n   ```\n\n   **验证是否成功切换**：\n\n   ```bash\ngcc --version\n   ```\n\n   ```bash\nlighthouse@VM-16-14-ubuntu:~/minnow$ gcc --version\ngcc (Ubuntu 13.1.0-8ubuntu1~22.04) 13.1.0\nCopyright (C) 2023 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n   ```\n\n   ok了。\n\n   ### 3.3 现代C++编程规范\n\n   CS144是一个以编程为主的课程。实验作业使用现代C++的编程风格，采用2011年及以后的新特性，目标是让代码尽可能安全。这种风格与之前的C++编程方式有所不同。更多相关信息可以参考[C++核心指南](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines)。\n\n   我们的基本目标是：确保每个对象的公共接口尽可能小，内部进行严格的安全检查，避免错误使用，并能在不需要时自动清理自己。我们希望避免需要手动配对的操作（例如：`malloc/free` 或 `new/delete`），因为会发生操作没有正确配对（例如：函数提前返回或抛出异常）。所以，我们希望通过构造函数来完成资源的初始化，并在析构函数中自动清理资源。这种做法叫做“资源获取即初始化”（RAII，**R**esource **A**cquisition **I**s **I**nitialization）。\n\n   **我们需要遵循以下规则：**\n\n   - 使用官方的C++文档（https://en.cppreference.com）作为参考。（不建议使用 `cplusplus.com`，因为它可能已经过时。）\n   - **永远不要使用 `malloc()` 或 `free()`**。\n   - **永远不要使用 `new` 或 `delete`**。\n   - **尽量避免使用原始指针（`*`）**，仅在绝对必要时才使用智能指针（`unique_ptr` 或 `shared_ptr`）。在这门课程中不需要这些。\n   - 避免使用模板、线程、锁和虚函数。在这门课程中也不需要这些。\n   - **避免使用 C 风格的字符串（如 `char *str`）和字符串函数（如 `strlen()`、`strcpy()`）**，这些容易出错。尽量使用 `std::string` 来处理字符串。\n   - **不要使用 C 风格的强制类型转换（如 `(FILE *)x`）**，如果需要转换类型，使用 C++ 的 `static_cast`（不过在这门课中你通常不需要这么做）。\n   - 优先使用常量引用（`const`）来传递函数参数，例如：`const Address &address`。\n   - **让每个变量都成为常量（`const`），除非必须修改它**。\n   - **让每个方法都成为常量（`const`），除非方法需要修改对象**。\n   - **避免使用全局变量**，并尽可能缩小每个变量的作用范围。\n   - 在提交作业之前，请运行 `cmake --build build --target tidy` 来查看代码中可以改进的地方，运行 `cmake --build build --target format` 来统一格式。\n\n   **关于使用 Git：**\n\n   实验作业是通过 Git（版本控制工具）进行分发的。Git 可以帮助记录你做过的所有更改，便于调试和追踪代码的历史。我们建议你在编写代码时，频繁进行小的提交，并且每次提交时都要写清楚修改了什么，以及为什么做这个修改。理想情况下，每次提交后，代码应该可以正常编译，并且随着时间的推移，测试逐渐通过。频繁的小提交有助于调试（因为每次提交都会编译，而且提交信息清晰地说明了修改的目的），同时也能防止出现作弊的嫌疑，因为你可以清楚地看到自己在每个阶段的进展。这也会帮助你在未来的编程职业中更好地管理代码。\n\n   评分人员会根据你的 Git 提交记录，了解你是如何逐步完成实验的。如果你不懂如何使用 Git，可以向 CS144 办公室寻求帮助，或查看一些 Git 教程（例如：https://guides.github.com/introduction/git-handbook）。最后，请确保将代码提交到一个私有的 GitHub 仓库，确保代码不会公开访问。\n\n   再次强调：在工作过程中，**要频繁进行小的提交**，并写清楚每次提交的修改内容和原因。\n\n---\n\n   ### **3.4 阅读 Minnow 支持代码**\n\n   为了支持这种编程风格，Minnow 的类将操作系统函数（可以通过 C 调用）封装在“现代”C++中。我们为一些你应该在 CS 111 课程中熟悉的概念提供了 C++ 封装，特别是套接字和文件描述符。\n\n   阅读 `util/socket.hh` 和 `util/file descriptor.hh` 文件中的`public`接口部分（即文件中“public:”之后的内容）。需要注意的是，`Socket` 是 `FileDescriptor` 类型的一种，`TCPSocket` 是 `Socket` 类型的一种。\n\n### **3.5 编写 webget**\n\n   现在是时候实现 `webget` 程序了，它将通过操作系统的 TCP 支持和流套接字抽象来获取网页——在本实验中之前，我们曾手动发送了一些请求，现在我们需要用`cpp`程序代替他们。\n\n1. 从构建目录中，使用文本编辑器或 IDE 打开 `../apps/webget.cc` 文件。\n\n2. 在 `get_URL` 函数中，按照文件中描述的方式实现一个简单的 Web 客户端，使用你之前使用过的 HTTP 请求格式，用上 `TCPSocket` 和 `Address` 类。\n\n   首先看一看`get_URL`的样子：\n\n   ```cpp\n   void get_URL( const string& host, const string& path )\n   {\n     cerr << \"Function called: get_URL(\" << host << \", \" << path << \")\\n\";\n     cerr << \"Warning: get_URL() has not been implemented yet.\\n\";\n   }\n   ```\n\n   参数`host`和`path`是什么？——我们不妨回忆一下之手动发送的HTTP请求：\n\n   ```http\n   GET /lab0 HTTP/1.1\n   Host: cs144.keithw.org\n   Connection: close\n   ```\n\n   `host`是我们要访问的地址，\n\n​\t在 HTTP 请求中，每一行都必须以 “\\r\\n” 结束（仅使用“\\n”或 `endl` 是不够的）。同时在请求中，包含了 `Connection: close` 这一行，这告诉服务器，在处理完当前请求后，客户端不会再发送任何请求。服务器会发送一个响应后立即关闭与客户端的连接。你将通过检测“EOF”（文件结束）来知道服务器已经完成了响应，因为当服务器的字节流完全传输完毕时，你的套接字会到达 EOF。因此，我们必须确保从服务器读取并打印所有输出，直到套接字达到“EOF”（文件结束）——单次调用 `read` 是不够的。我们预计你大约需要写 10 行代码。\n\n通过运行 `cmake --build build .` 编译程序。\n\n3. 通过运行 `./apps/webget cs144.keithw.org /hello` 来测试你的程序。试试看你从浏览器访问 `http://cs144.keithw.org/hello` 时的结果和程序输出有什么区别？它与第 2.1 节的结果有何不同？你可以自由尝试——测试任何 HTTP URL！\n\n4. 当程序似乎正常工作时，运行 `cmake --build build --target check_webget`来运行自动化测试。在实现`get_URL` 函数之前，你应该看到如下输出：\n\n```bash\ncmake --build build --target check_webget\nTest project /home/cs144/minnow/build\nStart 1: compile with bug-checkers\n1/2 Test #1: compile with bug-checkers ........ Passed 1.02 sec\nStart 2: t_webget\n2/2 Test #2: t_webget .........................***Failed 0.01 sec\nFunction called: get_URL(cs144.keithw.org, /nph-hasher/xyzzy)\nWarning: get_URL() has not been implemented yet.\nERROR: webget returned output that did not match the test's expectations\n```\n\n完成作业后，你应该看到：\n\n```bash\ncmake --build build --target check_webget\nTest project /home/cs144/minnow/build\nStart 1: compile with bug-checkers\n1/2 Test #1: compile with bug-checkers ........ Passed 1.09 sec\nStart 2: t_webget\n2/2 Test #2: t_webget ......................... Passed 0.72 sec\n100% tests passed, 0 tests failed out of 2\n```\n\n      1. 评分人员将使用与你的单元测试不同的主机名和路径来运行你的 `webget` 程序，因此请确保它不仅能在单元测试使用的主机名和路径上运行。\n\n   ## 4 内存中的可靠字节流\n\n   到目前为止，你已经看到如何通过可靠字节流的抽象来进行网络通信，尽管互联网本身只提供“尽力而为”（不可靠）的数据报服务。\n\n   在本周实验的最后，你将实现一个对象，它在单台计算机的内存中提供这个抽象（你可能在 CS 110/111 中做过类似的工作）。字节被写入“输入”端，并可以按相同的顺序从“输出”端读取。字节流是有限的：写入方可以结束输入，之后不能再写入字节。当读者读取到流的末尾时，它将遇到“EOF”（文件结束），并且不能再读取字节。你的字节流还将进行流量控制，以限制其在任何给定时刻的内存消耗。该对象初始化时会设置一个“容量”，即它在任何给定时刻愿意存储的最大字节数。字节流将限制写入方在任何给定时刻的写入量，以确保流不会超出其存储容量。当读者读取字节并将其从流中移除时，写入方才可以继续写入。\n\n   请注意：字节流是有限的，但在写入方结束输入并完成流之前，它几乎可以是任意长的。你的实现必须能够处理远远超过容量的流。容量限制的是当前时刻内存中存储的字节数（即已写入但尚未读取的字节数），但并不限制流的长度。一个容量仅为一个字节的对象仍然可以承载一个长达数TB的流，只要写入方一次只写一个字节，且读取方在写入方允许写入下一个字节之前读取完每个字节。\n\n   以下是写入方的接口：\n\n   ```cpp\nvoid push(std::string data); // 向流中推送数据，但仅限于可用容量允许的字节数。\nvoid close(); // 表示流已经结束，之后不能再写入。\nbool is_closed() const; // 流是否已经关闭？\nuint64_t available_capacity() const; // 当前可以写入多少字节？\nuint64_t bytes_pushed() const; // 总共推送到流中的字节数\n   ```\n\n   以下是读取方的接口：\n\n   ```cpp\nstd::string_view peek() const; // 查看缓冲区中的下一个字节\nvoid pop(uint64_t len); // 从缓冲区中移除 `len` 字节\nbool is_finished() const; // 流是否已经完成（已关闭且完全被读取）？\nbool has_error() const; // 流是否发生了错误？\nuint64_t bytes_buffered() const; // 当前缓冲的字节数（已推送但未读取）\nuint64_t bytes_popped() const; // 总共从流中移除的字节数\n   ```\n\n   打开 `src/byte_stream.hh` 和 `src/byte_stream.cc` 文件，并实现提供此接口的对象。在开发字节流实现时，你可以通过运行 `cmake --build build --target check0` 来运行自动化测试。\n\n   如果所有测试通过，`check0` 测试将会运行一个速度基准测试。对于这门课程，只要你的实现速度超过 0.1 Gbit/s（即每秒 1 亿比特），对于三种 `pop` 长度的测试而言就是合格的。（实现速度可能会超过 10 Gbit/s，但这取决于你的计算机速度，并不是必需的。）\n\n   **接下来做什么？** 在接下来的四周里，你将实现一个系统，提供相同的接口，但不是在内存中，而是通过不可靠传输的网络层，这就是传输控制协议（TCP）——这是世界上最普遍使用的计算机程序。\n\n------\n\n## 5 提交\n\n请注意以下几点\n\n   - 在提交时，请只修改 `webget.cc` 和 `src` 目录下的源代码（`byte_stream.hh` 和 `byte_stream.cc`）。请不要修改任何测试代码或 `util` 中的辅助代码。\n\n   - 记得在编写代码时进行小的提交，并写出清晰的提交消息。每次提交后，记得将你的 VM 仓库备份到私有的 GitHub 仓库中，方法是运行 `git push github`。你的代码需要被提交并推送到 GitHub，才能进行评分。\n\n   - 提交作业前，请按以下顺序执行：\n\n     (a) 确保所有更改都已提交到 Git 仓库。你可以运行 `git status` 来确保没有未提交的更改。记住：在编码时进行小的提交。 \n\n     (b) 运行 `cmake --build build --target format` （以规范代码风格）\n\n     (c) 运行 `cmake --build build --target check0` （确保自动化测试通过）\n\n     (d) 可选：运行 `cmake --build build --target tidy` （建议改进以遵循良好的 C++ 编程实践）","slug":"测试文章","published":1,"updated":"2025-02-18T11:48:59.301Z","_id":"cm7a9m31v0000rsy4ajsb8fs7","comments":1,"layout":"post","photos":[],"content":"<hr>\n<h1 id=\"CS144-计算机网络导论-2025年冬季\"><a href=\"#CS144-计算机网络导论-2025年冬季\" class=\"headerlink\" title=\"CS144: 计算机网络导论 2025年冬季\"></a><strong>CS144: 计算机网络导论 2025年冬季</strong></h1><h1 id=\"check0：\"><a href=\"#check0：\" class=\"headerlink\" title=\"check0：\"></a>check0：</h1><p>本次实验中大概四项任务：  </p>\n<ol>\n<li>在电脑上安装GNU&#x2F;Linux系统；  </li>\n<li>手动执行网络任务（如获取网页、发送邮件）；  </li>\n<li>用C++编写一个从互联网获取网页的小程序；  </li>\n<li>实现网络的核心抽象之一：<strong>内存中的可靠字节流</strong>（在写入端和读取端之间）。</li>\n</ol>\n<h2 id=\"1-配置GNU-Linux环境\"><a href=\"#1-配置GNU-Linux环境\" class=\"headerlink\" title=\"1 配置GNU&#x2F;Linux环境\"></a>1 配置GNU&#x2F;Linux环境</h2><p>在这里我选择了腾讯云服务器，随便选了一个免费的。</p>\n<p>在云服务器中安装一大堆依赖：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update &amp;&amp; <span class=\"built_in\">sudo</span> apt install git cmake gdb build-essential clang \\</span><br><span class=\"line\">clang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark</span><br></pre></td></tr></table></figure>\n\n<p>注意到可以通过ssh连接本地，以便于通过vscode控制服务器，所以花了一部分时间配置ssh。</p>\n<p>在本地使用git bash的命令生成isa码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;自己的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>会在<code>~/.ssh/</code> 目录下生成 <code>id_rsa</code>（私钥）和 <code>id_rsa.pub</code>（公钥），私钥不用管，把公钥复制下来，在腾讯云服务器手动配置ssh。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;你的公钥内容&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以保证服务器收到公钥后同意连接了。</p>\n<p>接下来是vscode的配置，通过配置本地的vscode，以保证vscode能正确的发送ssh请求。</p>\n<p>打开vscode后，<code>ctrl+shift+p</code>打开命令行，输入<code>remote ssh</code>，点打开ssh配置文件，会安装一堆插件，直接无脑安装即可</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190300944-1200574314.png\"></p>\n<p>之后打开ssh配置文件，点第一个config文件。</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190248893-755240931.png\"></p>\n<p>大概率config是空白，按以下格式输入就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tencent-cloud(这个地方随便输入啥都行)</span><br><span class=\"line\">    HostName 114.514.0(自己服务器的公网ip地址)</span><br><span class=\"line\">    User ubuntu(在服务器上输入whoami命令，会返回用户名)</span><br><span class=\"line\">    Port 22</span><br></pre></td></tr></table></figure>\n\n<p>然后再点<code>ctrl+shift+p</code>就可以连接到主机了</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190329214-2023054758.png\"></p>\n<hr>\n<h2 id=\"2-使用命令行上网\"><a href=\"#2-使用命令行上网\" class=\"headerlink\" title=\"2 使用命令行上网\"></a>2 使用命令行上网</h2><h3 id=\"2-1-获取网页\"><a href=\"#2-1-获取网页\" class=\"headerlink\" title=\"2.1 获取网页\"></a>2.1 获取网页</h3><p>   日常里，在浏览器我们可以直接输入 <a href=\"http://cs144.keithw.org/hello\">http://cs144.keithw.org/hello</a> 以查看结果。  而现在，我们需要手动模拟浏览器的行为。</p>\n<ol>\n<li><p>在vscode终端中，运行以下命令，以连接服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet cs144.keithw.org http</span><br></pre></td></tr></table></figure>\n\n<p>telnet实际上与ssh类似，都是一个实用的远程连接命令，该命令允许用本地计算机去连接cs144网页的服务器，我们在本地的命令可以在服务器上运行。</p>\n<p>正常情况下，会得到以下执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~$ telnet cs144.keithw.org http</span><br><span class=\"line\">Trying 104.196.238.229...</span><br><span class=\"line\">Connected to cs144.keithw.org.</span><br><span class=\"line\">Escape character is <span class=\"string\">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这条执行结果告诉我们连接上了cs144这个网站，<code>Escape character is &#39;^]&#39;.</code>是 <code>telnet</code> 的提示，表示我们可以按 <code>Ctrl + ]</code> 进入 <code>telnet</code> 的命令模式（退出、关闭连接等），我们暂时不用管。</p>\n<p>依次输入：  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br></pre></td></tr></table></figure>\n\n<p>需要按两次回车，如果接收到以下响应，就表示请求成功了。  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 10 Feb 2025 11:22:42 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>Apache</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span><span class=\"punctuation\">: </span>Thu, 13 Dec 2018 15:45:29 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span><span class=\"punctuation\">: </span>&quot;e-57ce93446cb64&quot;</span><br><span class=\"line\"><span class=\"attribute\">Accept-Ranges</span><span class=\"punctuation\">: </span>bytes</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>14</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/plain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-pgsql\">Hello, CS144!</span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">Connection</span> closed <span class=\"keyword\">by</span> <span class=\"keyword\">foreign</span> host.</span></span><br><span class=\"line\"><span class=\"language-pgsql\"></span></span><br></pre></td></tr></table></figure>\n\n<p>我们来一行行观察一下这些命令：</p>\n<ul>\n<li><p><code>GET /hello HTTP/1.1</code></p>\n<p>这行表示客户端向服务器发出了一个 <code>GET</code> 请求，请求资源 <code>/hello</code>。<code>GET</code> 是一种 HTTP 请求方法，表示客户端请求获取指定的资源</p>\n</li>\n<li><p><code>Host: cs144.keithw.org</code></p>\n<p><code>Host</code> 表示目标服务器的主机名或域名。这里是 <code>cs144.keithw.org</code>，告诉服务器哪个虚拟主机处理请求</p>\n</li>\n</ul>\n<p>在相应部分中：</p>\n<ul>\n<li><code>HTTP/1.1 200 OK</code>: 表示 <code>/hello</code> 请求已成功处理。</li>\n<li><code>Content-Type: text/plain</code>: 表示返回的数据类型是纯文本（<code>text/plain</code>）。</li>\n<li><code>Content-Length: 14</code>: 表示响应体的长度为 14 字节，意味着返回的内容长度是 14 字符。</li>\n<li><code>Hello, CS144!</code>: 这是响应体的内容，即服务器返回的数据。客户端请求 <code>/hello</code> 时，服务器返回了 <code>Hello, CS144!</code> 这段文本。</li>\n</ul>\n<p>也就是说，这些指令等效于直接输入<code>cs144.keithw.org/hello</code>，而且可以得到<code>hello,cs144!</code>这段文本：</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190408084-926072557.png\"></p>\n<p>任务是手动获取URL <code>http://cs144.keithw.org/lab0/sunetid</code>（替换为你的SUNet ID），从响应头 <code>X-Your-Code-Is</code> 中提取密钥。</p>\n<p>那我们只要修改<code>get</code>请求就好了</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 10 Feb 2025 11:50:10 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>Apache</span><br><span class=\"line\"><span class=\"attribute\">X-You-Said-Your-SunetID-Was</span><span class=\"punctuation\">: </span>114514</span><br><span class=\"line\"><span class=\"attribute\">X-Your-Code-Is</span><span class=\"punctuation\">: </span>45573</span><br><span class=\"line\"><span class=\"attribute\">Content-length</span><span class=\"punctuation\">: </span>110</span><br><span class=\"line\"><span class=\"attribute\">Vary</span><span class=\"punctuation\">: </span>Accept-Encoding</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/plain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-applescript\">Hello! You told us <span class=\"keyword\">that</span> your SUNet ID was <span class=\"string\">&quot;114514&quot;</span>. Please see <span class=\"keyword\">the</span> HTTP headers (<span class=\"keyword\">above</span>) <span class=\"keyword\">for</span> your secret code.</span></span><br><span class=\"line\"><span class=\"language-applescript\">Connection closed <span class=\"keyword\">by</span> foreign host.</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-2-给自己发送一封邮件\"><a href=\"#2-2-给自己发送一封邮件\" class=\"headerlink\" title=\"2.2 给自己发送一封邮件\"></a>2.2 给自己发送一封邮件</h3><p>   本小节要求使用**可靠字节传输流（reliable byte stream）**发送邮件给另一台电脑了，但是由于各个邮箱并没有给权限，且我们不是斯坦福大学学生，所以本小节是无法完成的。</p>\n<ol>\n<li><p>在原课程中，要求我们通过SSH登录Stanford网络：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet 148.163.153.234 smtp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按顺序输入SMTP命令：  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HELO mycomputer.stanford.edu</span><br><span class=\"line\">MAIL FROM: &lt;sunetid@stanford.edu&gt;</span><br><span class=\"line\">RCPT TO: &lt;sunetid@stanford.edu&gt;</span><br><span class=\"line\">DATA</span><br><span class=\"line\"><span class=\"attribute\">From</span><span class=\"punctuation\">: </span>sunetid@stanford.edu</span><br><span class=\"line\"><span class=\"attribute\">To</span><span class=\"punctuation\">: </span>sunetid@stanford.edu</span><br><span class=\"line\"><span class=\"attribute\">Subject</span><span class=\"punctuation\">: </span>Hello from CS144 Lab 0</span><br><span class=\"line\">QUIT</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"2-3-监听与连接\"><a href=\"#2-3-监听与连接\" class=\"headerlink\" title=\"2.3 监听与连接\"></a>2.3 监听与连接</h3><p>   上面两节或许让你对<code>telnet</code>有了理解：它是一个客户端程序，可以与其他计算机（服务器）程序建立连接，现在尝试成为服务器——等待客户端的连接程序。</p>\n<ol>\n<li><p><strong>启动服务端</strong></p>\n<p>在虚拟机的终端1运行 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netcat -v -l -p 9090</span><br></pre></td></tr></table></figure>\n\n<p>这是在终端1上启动一个监听端口为 <code>9090</code> 的服务端，使用 <code>netcat</code> (简称 <code>nc</code>) 工具来监听该端口。</p>\n<ul>\n<li><code>-v</code> 是指启用详细模式（verbose），可以显示更多的调试信息。</li>\n<li><code>-l</code> 表示让 <code>netcat</code> 进入监听模式，等待客户端连接。</li>\n<li><code>-p 9090</code> 指定监听端口为 <code>9090</code>。</li>\n</ul>\n<p>执行该命令后，你应该会看到类似于以下的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listening on [0.0.0.0] (family 0, port 9090)</span><br></pre></td></tr></table></figure>\n\n<p>这表明 <code>netcat</code> 正在监听端口 <code>9090</code>，等待客户端连接。</p>\n</li>\n<li><p><strong>启动客户端：</strong></p>\n<p>在虚拟机上再打开一个终端2，如果是ssh连接的话就再打开一个vscode，运行： </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 9090</span><br></pre></td></tr></table></figure>\n\n<p>这是在终端2上执行的命令，目的是连接到在终端1上运行的服务端。</p>\n<ul>\n<li><code>localhost</code> 是指本地计算机的 IP 地址。</li>\n<li><code>9090</code> 是前面指定的服务端口号。<br>使用 <code>telnet</code> 工具可以与监听端口建立连接，并进行简单的文本通信。</li>\n</ul>\n<p>如果一切正常，你应该会看到类似的输出：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trying 127.0.0.1...Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>这表明 <code>telnet</code> 成功连接到了服务端。</p>\n</li>\n<li><p><strong>进行双向通信</strong></p>\n<p>在任意一个终端（客户端或服务端）键入内容，你会看到对方窗口立即显示你输入的内容。</p>\n<p>例如，在 <code>telnet</code> 窗口中输入 <code>Hello</code>，然后按回车键，你会看到 <code>netcat</code> 服务端窗口会显示出 <code>Hello</code>，反之亦然。</p>\n</li>\n<li><p><strong>终止连接：</strong></p>\n<p>在 <code>netcat</code> 端，按下 <code>Ctrl-C</code> 会结束服务端进程，连接将被关闭。此时，<code>telnet</code> 客户端也会自动断开连接并退出。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>   由于是该过程是使用本地连接（<code>localhost</code>），所以整个过程不需要依赖外部网络。</p>\n<hr>\n<h2 id=\"3-使用流套接字（stream-socket）编写网络程序\"><a href=\"#3-使用流套接字（stream-socket）编写网络程序\" class=\"headerlink\" title=\"3 使用流套接字（stream socket）编写网络程序\"></a>3 使用流套接字（stream socket）编写网络程序</h2><p>   在本部分，你将写一个能通过互联网获取页面的简短程序，利用 Linux 内核和大多数其他操作系统提供的功能，以在两个程序之间创建可靠的双向字节流：一个程序在您的计算机上运行，另一个程序在另一台计算机上运行。</p>\n<p>   这个功能称之为“<strong>流套接字</strong>”（stream socket），无论是对于您的程序还是对服务器来说，套接字看起来像一个普通的文件描述符。当两个流套接字连接时，写入一个套接字的任何字节最终都会以相同的顺序从另一台计算机上的另一个套接字输出。</p>\n<p>   事实上，互联网并不会真正的提供可靠字节流连接，相反，互联网真正做的就是尽“最大努力”将短小的数据片段传送到目的地，这短小的数据片称之为<code>数据报</code>，而每个数据报都包含一些报头，它指定了源地址和目标地址等信息——它来自哪台计算机，要发送到哪台计算机——以及要传送到目标计算机的一些有效载荷数据（最多约 1,500 字节）。</p>\n<p>   尽管互联网是尽力传送每个数据报，但数据报依然会：</p>\n<ul>\n<li>丢失</li>\n<li>无序传送</li>\n<li>传送时内容发生更改</li>\n<li>重复传送和多次传送</li>\n</ul>\n<p>   因此，将“<strong>尽力而为的数据报</strong>”转换为“<strong>可靠字节流</strong>”实际是两端的操作系统通常负责。</p>\n<p>   两台计算机必须合作，以确保流中的每个字节传送到另一端的流套接字时都能在正确位置。它们还必须告诉对方它们准备从另一台计算机接收多少数据，并确保发送的数据不超过另一端愿意接受的数据。所有这些都是使用 1981 年制定的约定方案完成的，该方案称为**<code>传输控制协议 (TCP)</code>**。</p>\n<p>   在本lab中，我们将编写一个名为“webget”的程序，该程序创建 TCP 流套接字、连接到 Web 服务器并获取页面——请注意，这个过程依赖于操作系统内部的 <strong>TCP&#x2F;IP 协议栈</strong>，我们只是调用系统提供的 <strong>socket API</strong>，而不需要自己管理数据包的可靠传输、重传、流量控制等底层细节。因此，我们只是站在 TCP 之上的<strong>应用层</strong>操作，比如建立连接、发送 HTTP 请求、接收数据，不过，在未来的lab中，我们会通过自己实现<strong>TCP</strong>来从不太可靠的数据报中创建可靠的字节流。</p>\n<h3 id=\"3-1-配置代码仓库\"><a href=\"#3-1-配置代码仓库\" class=\"headerlink\" title=\"3.1 配置代码仓库\"></a>3.1 配置代码仓库</h3><ol>\n<li><p>我们使用名为“<strong>Minnow</strong>“的代码库，在虚拟机上执行：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:CS144/minnow.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> minnow</span><br></pre></td></tr></table></figure>\n\n<p>在GitHub创建<strong>私有仓库</strong>“minnow”，并添加协作者 <code>cs144-grader</code>（用以评分）</p>\n</li>\n<li><p>关联本地与远程仓库：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:username/minnow.git</span><br><span class=\"line\">git push github</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>git remote add</code></strong>：添加一个远程仓库（remote repository）。</p>\n</li>\n<li><p><strong><code>github</code></strong>：这是你为这个远程仓库取的名字，后续 <code>git push github</code> 会用到它。</p>\n</li>\n<li><p><strong><code>git@github.com:username/minnow.git</code></strong>：使用<strong>SSH</strong>连接<strong>GitHub</strong>，<code>username</code> 需要替换成你的 GitHub 用户名。</p>\n</li>\n</ul>\n<p>这样就能让本地的 Git 仓库知道远程 GitHub 仓库的存在，并建立联系。之后，就可以使用 <code>git push</code> 和 <code>git pull</code> 与 GitHub 交互。</p>\n<p>我们可以使用一行命令来查看连接结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>如果出现了以下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ git remote -v</span><br><span class=\"line\">github  git@github.com:seekerzhz/minnow.git (fetch)</span><br><span class=\"line\">github  git@github.com:seekerzhz/minnow.git (push)</span><br><span class=\"line\">origin  git@github.com:CS144/minnow.git (fetch)</span><br><span class=\"line\">origin  git@github.com:CS144/minnow.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>就说明连接成功了。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-2-编译代码\"><a href=\"#3-2-编译代码\" class=\"headerlink\" title=\"3.2 编译代码\"></a>3.2 编译代码</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -S . -B build</span><br><span class=\"line\">cmake --build build</span><br></pre></td></tr></table></figure>\n\n<p>   在执行第一条命令的时候，可能出现如下结果：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake -S . -B build</span><br><span class=\"line\">CMake Error at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class=\"line\">  CMake 3.24.2 or higher is required.  You are running version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n\n<p>   cmake版本太低了，我们查看一下cmake的版本：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\">cmake version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>\n\n<p>   毕竟是kitware提供的，即便我们执行更新指令也没有办法更新，所以我们可以从snap更新cmake：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> snap install cmake --classic</span><br></pre></td></tr></table></figure>\n\n<p>   只是会出现这种情况：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ <span class=\"built_in\">sudo</span> snap install cmake --classic</span><br><span class=\"line\"></span><br><span class=\"line\">cmake 3.31.5 from Crascit✓ installed</span><br><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version</span><br><span class=\"line\">cmake version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ <span class=\"built_in\">which</span> cmake</span><br><span class=\"line\">/usr/bin/cmake</span><br></pre></td></tr></table></figure>\n\n<p>   虽然更新了，但cmake用的还是user&#x2F;bin的cmake，我们只要改一下路径，手动将 <code>/usr/bin/cmake</code> 替换为 Snap 版本：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -sf /snap/bin/cmake /usr/bin/cmake</span><br></pre></td></tr></table></figure>\n\n<p>   然后再次运行：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>   此时应该会显示 <strong>3.31.5</strong>。</p>\n<p>   <code>cmake -S . -B build</code></p>\n<ul>\n<li><code>-S .</code>：指定 <strong>源代码</strong> 目录为当前目录 (<code>.</code>)。</li>\n<li><code>-B build</code>：指定 <strong>构建目录</strong> 为 <code>build</code>，所有编译文件会存放在这个 <code>build</code> 目录中，而不会污染源代码目录。</li>\n</ul>\n<p>   执行后， <code>build/</code> 目录被创建，其中包含 CMake 生成的构建文件。</p>\n<p>   同时，在执行<code>cmake --build build</code>的时候也会出现问题</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Building <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Debug&#x27;</span> mode.</span><br><span class=\"line\">-- Configuring <span class=\"keyword\">done</span> (0.2s)</span><br><span class=\"line\">-- Generating <span class=\"keyword\">done</span> (0.3s)</span><br><span class=\"line\">-- Build files have been written to: /home/lighthouse/minnow/build</span><br><span class=\"line\">[  5%] Building CXX object util/CMakeFiles/util_debug.dir/debug.cc.o</span><br><span class=\"line\">[ 21%] Built target minnow_debug</span><br><span class=\"line\">[ 26%] Building CXX object tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o</span><br><span class=\"line\">In file included from /home/lighthouse/minnow/util/debug.cc:1:</span><br><span class=\"line\">/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory</span><br><span class=\"line\">    3 | <span class=\"comment\">#include &lt;format&gt;</span></span><br><span class=\"line\">      |          ^~~~~~~~</span><br><span class=\"line\">compilation terminated.</span><br><span class=\"line\">make[2]: *** [util/CMakeFiles/util_debug.dir/build.make:93: util/CMakeFiles/util_debug.dir/debug.cc.o] Error 1</span><br><span class=\"line\">make[1]: *** [CMakeFiles/Makefile2:2786: util/CMakeFiles/util_debug.dir/all] Error 2</span><br><span class=\"line\">make[1]: *** Waiting <span class=\"keyword\">for</span> unfinished <span class=\"built_in\">jobs</span>....</span><br><span class=\"line\">In file included from /home/lighthouse/minnow/tests/common.hh:4,</span><br><span class=\"line\">                 from /home/lighthouse/minnow/tests/common.cc:1:</span><br><span class=\"line\">/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory</span><br><span class=\"line\">    3 | <span class=\"comment\">#include &lt;format&gt;</span></span><br><span class=\"line\">      |          ^~~~~~~~</span><br><span class=\"line\">compilation terminated.</span><br><span class=\"line\">make[2]: *** [tests/CMakeFiles/minnow_testing_debug.dir/build.make:79: tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o] Error 1</span><br><span class=\"line\">make[1]: *** [CMakeFiles/Makefile2:2978: tests/CMakeFiles/minnow_testing_debug.dir/all] Error 2</span><br><span class=\"line\">make: *** [Makefile:101: all] Error 2</span><br></pre></td></tr></table></figure>\n\n<p>   你妈的，没有<strong>format</strong>库啊。<strong>format</strong>是cpp20新增的特性，这时候应该更新gcc了</p>\n<p>   <strong>添加 Ubuntu 官方的 GCC PPA</strong>（这是一个提供更新版本的包源）：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>安装新版本的 GCC</strong>，至少是GCC 13才支持format。</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install gcc-13 g++-13</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>切换到安装的 GCC 版本</strong>：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>验证是否成功切换</strong>：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ gcc --version</span><br><span class=\"line\">gcc (Ubuntu 13.1.0-8ubuntu1~22.04) 13.1.0</span><br><span class=\"line\">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>   ok了。</p>\n<h3 id=\"3-3-现代C-编程规范\"><a href=\"#3-3-现代C-编程规范\" class=\"headerlink\" title=\"3.3 现代C++编程规范\"></a>3.3 现代C++编程规范</h3><p>   CS144是一个以编程为主的课程。实验作业使用现代C++的编程风格，采用2011年及以后的新特性，目标是让代码尽可能安全。这种风格与之前的C++编程方式有所不同。更多相关信息可以参考<a href=\"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines\">C++核心指南</a>。</p>\n<p>   我们的基本目标是：确保每个对象的公共接口尽可能小，内部进行严格的安全检查，避免错误使用，并能在不需要时自动清理自己。我们希望避免需要手动配对的操作（例如：<code>malloc/free</code> 或 <code>new/delete</code>），因为会发生操作没有正确配对（例如：函数提前返回或抛出异常）。所以，我们希望通过构造函数来完成资源的初始化，并在析构函数中自动清理资源。这种做法叫做“资源获取即初始化”（RAII，<strong>R</strong>esource <strong>A</strong>cquisition <strong>I</strong>s <strong>I</strong>nitialization）。</p>\n<p>   <strong>我们需要遵循以下规则：</strong></p>\n<ul>\n<li>使用官方的C++文档（<a href=\"https://en.cppreference.com)作为参考.(不建议使用/\">https://en.cppreference.com）作为参考。（不建议使用</a> <code>cplusplus.com</code>，因为它可能已经过时。）</li>\n<li><strong>永远不要使用 <code>malloc()</code> 或 <code>free()</code></strong>。</li>\n<li><strong>永远不要使用 <code>new</code> 或 <code>delete</code></strong>。</li>\n<li><strong>尽量避免使用原始指针（<code>*</code>）</strong>，仅在绝对必要时才使用智能指针（<code>unique_ptr</code> 或 <code>shared_ptr</code>）。在这门课程中不需要这些。</li>\n<li>避免使用模板、线程、锁和虚函数。在这门课程中也不需要这些。</li>\n<li><strong>避免使用 C 风格的字符串（如 <code>char *str</code>）和字符串函数（如 <code>strlen()</code>、<code>strcpy()</code>）</strong>，这些容易出错。尽量使用 <code>std::string</code> 来处理字符串。</li>\n<li><strong>不要使用 C 风格的强制类型转换（如 <code>(FILE *)x</code>）</strong>，如果需要转换类型，使用 C++ 的 <code>static_cast</code>（不过在这门课中你通常不需要这么做）。</li>\n<li>优先使用常量引用（<code>const</code>）来传递函数参数，例如：<code>const Address &amp;address</code>。</li>\n<li><strong>让每个变量都成为常量（<code>const</code>），除非必须修改它</strong>。</li>\n<li><strong>让每个方法都成为常量（<code>const</code>），除非方法需要修改对象</strong>。</li>\n<li><strong>避免使用全局变量</strong>，并尽可能缩小每个变量的作用范围。</li>\n<li>在提交作业之前，请运行 <code>cmake --build build --target tidy</code> 来查看代码中可以改进的地方，运行 <code>cmake --build build --target format</code> 来统一格式。</li>\n</ul>\n<p>   <strong>关于使用 Git：</strong></p>\n<p>   实验作业是通过 Git（版本控制工具）进行分发的。Git 可以帮助记录你做过的所有更改，便于调试和追踪代码的历史。我们建议你在编写代码时，频繁进行小的提交，并且每次提交时都要写清楚修改了什么，以及为什么做这个修改。理想情况下，每次提交后，代码应该可以正常编译，并且随着时间的推移，测试逐渐通过。频繁的小提交有助于调试（因为每次提交都会编译，而且提交信息清晰地说明了修改的目的），同时也能防止出现作弊的嫌疑，因为你可以清楚地看到自己在每个阶段的进展。这也会帮助你在未来的编程职业中更好地管理代码。</p>\n<p>   评分人员会根据你的 Git 提交记录，了解你是如何逐步完成实验的。如果你不懂如何使用 Git，可以向 CS144 办公室寻求帮助，或查看一些 Git 教程（例如：<a href=\"https://guides.github.com/introduction/git-handbook%EF%BC%89%E3%80%82%E6%9C%80%E5%90%8E%EF%BC%8C%E8%AF%B7%E7%A1%AE%E4%BF%9D%E5%B0%86%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E7%9A%84\">https://guides.github.com/introduction/git-handbook）。最后，请确保将代码提交到一个私有的</a> GitHub 仓库，确保代码不会公开访问。</p>\n<p>   再次强调：在工作过程中，<strong>要频繁进行小的提交</strong>，并写清楚每次提交的修改内容和原因。</p>\n<hr>\n<h3 id=\"3-4-阅读-Minnow-支持代码\"><a href=\"#3-4-阅读-Minnow-支持代码\" class=\"headerlink\" title=\"3.4 阅读 Minnow 支持代码\"></a><strong>3.4 阅读 Minnow 支持代码</strong></h3><p>   为了支持这种编程风格，Minnow 的类将操作系统函数（可以通过 C 调用）封装在“现代”C++中。我们为一些你应该在 CS 111 课程中熟悉的概念提供了 C++ 封装，特别是套接字和文件描述符。</p>\n<p>   阅读 <code>util/socket.hh</code> 和 <code>util/file descriptor.hh</code> 文件中的<code>public</code>接口部分（即文件中“public:”之后的内容）。需要注意的是，<code>Socket</code> 是 <code>FileDescriptor</code> 类型的一种，<code>TCPSocket</code> 是 <code>Socket</code> 类型的一种。</p>\n<h3 id=\"3-5-编写-webget\"><a href=\"#3-5-编写-webget\" class=\"headerlink\" title=\"3.5 编写 webget\"></a><strong>3.5 编写 webget</strong></h3><p>   现在是时候实现 <code>webget</code> 程序了，它将通过操作系统的 TCP 支持和流套接字抽象来获取网页——在本实验中之前，我们曾手动发送了一些请求，现在我们需要用<code>cpp</code>程序代替他们。</p>\n<ol>\n<li><p>从构建目录中，使用文本编辑器或 IDE 打开 <code>../apps/webget.cc</code> 文件。</p>\n</li>\n<li><p>在 <code>get_URL</code> 函数中，按照文件中描述的方式实现一个简单的 Web 客户端，使用你之前使用过的 HTTP 请求格式，用上 <code>TCPSocket</code> 和 <code>Address</code> 类。</p>\n<p>首先看一看<code>get_URL</code>的样子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_URL</span><span class=\"params\">( <span class=\"type\">const</span> string&amp; host, <span class=\"type\">const</span> string&amp; path )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cerr &lt;&lt; <span class=\"string\">&quot;Function called: get_URL(&quot;</span> &lt;&lt; host &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; path &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">  cerr &lt;&lt; <span class=\"string\">&quot;Warning: get_URL() has not been implemented yet.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数<code>host</code>和<code>path</code>是什么？——我们不妨回忆一下之手动发送的HTTP请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/lab0</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br></pre></td></tr></table></figure>\n\n<p><code>host</code>是我们要访问的地址，</p>\n</li>\n</ol>\n<p>​\t在 HTTP 请求中，每一行都必须以 “\\r\\n” 结束（仅使用“\\n”或 <code>endl</code> 是不够的）。同时在请求中，包含了 <code>Connection: close</code> 这一行，这告诉服务器，在处理完当前请求后，客户端不会再发送任何请求。服务器会发送一个响应后立即关闭与客户端的连接。你将通过检测“EOF”（文件结束）来知道服务器已经完成了响应，因为当服务器的字节流完全传输完毕时，你的套接字会到达 EOF。因此，我们必须确保从服务器读取并打印所有输出，直到套接字达到“EOF”（文件结束）——单次调用 <code>read</code> 是不够的。我们预计你大约需要写 10 行代码。</p>\n<p>通过运行 <code>cmake --build build .</code> 编译程序。</p>\n<ol start=\"3\">\n<li><p>通过运行 <code>./apps/webget cs144.keithw.org /hello</code> 来测试你的程序。试试看你从浏览器访问 <code>http://cs144.keithw.org/hello</code> 时的结果和程序输出有什么区别？它与第 2.1 节的结果有何不同？你可以自由尝试——测试任何 HTTP URL！</p>\n</li>\n<li><p>当程序似乎正常工作时，运行 <code>cmake --build build --target check_webget</code>来运行自动化测试。在实现<code>get_URL</code> 函数之前，你应该看到如下输出：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build --target check_webget</span><br><span class=\"line\">Test project /home/cs144/minnow/build</span><br><span class=\"line\">Start 1: compile with bug-checkers</span><br><span class=\"line\">1/2 Test <span class=\"comment\">#1: compile with bug-checkers ........ Passed 1.02 sec</span></span><br><span class=\"line\">Start 2: t_webget</span><br><span class=\"line\">2/2 Test <span class=\"comment\">#2: t_webget .........................***Failed 0.01 sec</span></span><br><span class=\"line\">Function called: get_URL(cs144.keithw.org, /nph-hasher/xyzzy)</span><br><span class=\"line\">Warning: get_URL() has not been implemented yet.</span><br><span class=\"line\">ERROR: webget returned output that did not match the <span class=\"built_in\">test</span><span class=\"string\">&#x27;s expectations</span></span><br></pre></td></tr></table></figure>\n\n<p>完成作业后，你应该看到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build --target check_webget</span><br><span class=\"line\">Test project /home/cs144/minnow/build</span><br><span class=\"line\">Start 1: compile with bug-checkers</span><br><span class=\"line\">1/2 Test <span class=\"comment\">#1: compile with bug-checkers ........ Passed 1.09 sec</span></span><br><span class=\"line\">Start 2: t_webget</span><br><span class=\"line\">2/2 Test <span class=\"comment\">#2: t_webget ......................... Passed 0.72 sec</span></span><br><span class=\"line\">100% tests passed, 0 tests failed out of 2</span><br></pre></td></tr></table></figure>\n\n<pre><code>  1. 评分人员将使用与你的单元测试不同的主机名和路径来运行你的 `webget` 程序，因此请确保它不仅能在单元测试使用的主机名和路径上运行。\n</code></pre>\n<h2 id=\"4-内存中的可靠字节流\"><a href=\"#4-内存中的可靠字节流\" class=\"headerlink\" title=\"4 内存中的可靠字节流\"></a>4 内存中的可靠字节流</h2><p>   到目前为止，你已经看到如何通过可靠字节流的抽象来进行网络通信，尽管互联网本身只提供“尽力而为”（不可靠）的数据报服务。</p>\n<p>   在本周实验的最后，你将实现一个对象，它在单台计算机的内存中提供这个抽象（你可能在 CS 110&#x2F;111 中做过类似的工作）。字节被写入“输入”端，并可以按相同的顺序从“输出”端读取。字节流是有限的：写入方可以结束输入，之后不能再写入字节。当读者读取到流的末尾时，它将遇到“EOF”（文件结束），并且不能再读取字节。你的字节流还将进行流量控制，以限制其在任何给定时刻的内存消耗。该对象初始化时会设置一个“容量”，即它在任何给定时刻愿意存储的最大字节数。字节流将限制写入方在任何给定时刻的写入量，以确保流不会超出其存储容量。当读者读取字节并将其从流中移除时，写入方才可以继续写入。</p>\n<p>   请注意：字节流是有限的，但在写入方结束输入并完成流之前，它几乎可以是任意长的。你的实现必须能够处理远远超过容量的流。容量限制的是当前时刻内存中存储的字节数（即已写入但尚未读取的字节数），但并不限制流的长度。一个容量仅为一个字节的对象仍然可以承载一个长达数TB的流，只要写入方一次只写一个字节，且读取方在写入方允许写入下一个字节之前读取完每个字节。</p>\n<p>   以下是写入方的接口：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(std::string data)</span></span>; <span class=\"comment\">// 向流中推送数据，但仅限于可用容量允许的字节数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 表示流已经结束，之后不能再写入。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_closed</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否已经关闭？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">available_capacity</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 当前可以写入多少字节？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_pushed</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 总共推送到流中的字节数</span></span><br></pre></td></tr></table></figure>\n\n<p>   以下是读取方的接口：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::string_view <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 查看缓冲区中的下一个字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"type\">uint64_t</span> len)</span></span>; <span class=\"comment\">// 从缓冲区中移除 `len` 字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_finished</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否已经完成（已关闭且完全被读取）？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">has_error</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否发生了错误？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_buffered</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 当前缓冲的字节数（已推送但未读取）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_popped</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 总共从流中移除的字节数</span></span><br></pre></td></tr></table></figure>\n\n<p>   打开 <code>src/byte_stream.hh</code> 和 <code>src/byte_stream.cc</code> 文件，并实现提供此接口的对象。在开发字节流实现时，你可以通过运行 <code>cmake --build build --target check0</code> 来运行自动化测试。</p>\n<p>   如果所有测试通过，<code>check0</code> 测试将会运行一个速度基准测试。对于这门课程，只要你的实现速度超过 0.1 Gbit&#x2F;s（即每秒 1 亿比特），对于三种 <code>pop</code> 长度的测试而言就是合格的。（实现速度可能会超过 10 Gbit&#x2F;s，但这取决于你的计算机速度，并不是必需的。）</p>\n<p>   <strong>接下来做什么？</strong> 在接下来的四周里，你将实现一个系统，提供相同的接口，但不是在内存中，而是通过不可靠传输的网络层，这就是传输控制协议（TCP）——这是世界上最普遍使用的计算机程序。</p>\n<hr>\n<h2 id=\"5-提交\"><a href=\"#5-提交\" class=\"headerlink\" title=\"5 提交\"></a>5 提交</h2><p>请注意以下几点</p>\n<ul>\n<li><p>在提交时，请只修改 <code>webget.cc</code> 和 <code>src</code> 目录下的源代码（<code>byte_stream.hh</code> 和 <code>byte_stream.cc</code>）。请不要修改任何测试代码或 <code>util</code> 中的辅助代码。</p>\n</li>\n<li><p>记得在编写代码时进行小的提交，并写出清晰的提交消息。每次提交后，记得将你的 VM 仓库备份到私有的 GitHub 仓库中，方法是运行 <code>git push github</code>。你的代码需要被提交并推送到 GitHub，才能进行评分。</p>\n</li>\n<li><p>提交作业前，请按以下顺序执行：</p>\n<p>(a) 确保所有更改都已提交到 Git 仓库。你可以运行 <code>git status</code> 来确保没有未提交的更改。记住：在编码时进行小的提交。 </p>\n<p>(b) 运行 <code>cmake --build build --target format</code> （以规范代码风格）</p>\n<p>(c) 运行 <code>cmake --build build --target check0</code> （确保自动化测试通过）</p>\n<p>(d) 可选：运行 <code>cmake --build build --target tidy</code> （建议改进以遵循良好的 C++ 编程实践）</p>\n</li>\n</ul>\n","excerpt":"","more":"<hr>\n<h1 id=\"CS144-计算机网络导论-2025年冬季\"><a href=\"#CS144-计算机网络导论-2025年冬季\" class=\"headerlink\" title=\"CS144: 计算机网络导论 2025年冬季\"></a><strong>CS144: 计算机网络导论 2025年冬季</strong></h1><h1 id=\"check0：\"><a href=\"#check0：\" class=\"headerlink\" title=\"check0：\"></a>check0：</h1><p>本次实验中大概四项任务：  </p>\n<ol>\n<li>在电脑上安装GNU&#x2F;Linux系统；  </li>\n<li>手动执行网络任务（如获取网页、发送邮件）；  </li>\n<li>用C++编写一个从互联网获取网页的小程序；  </li>\n<li>实现网络的核心抽象之一：<strong>内存中的可靠字节流</strong>（在写入端和读取端之间）。</li>\n</ol>\n<h2 id=\"1-配置GNU-Linux环境\"><a href=\"#1-配置GNU-Linux环境\" class=\"headerlink\" title=\"1 配置GNU&#x2F;Linux环境\"></a>1 配置GNU&#x2F;Linux环境</h2><p>在这里我选择了腾讯云服务器，随便选了一个免费的。</p>\n<p>在云服务器中安装一大堆依赖：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update &amp;&amp; <span class=\"built_in\">sudo</span> apt install git cmake gdb build-essential clang \\</span><br><span class=\"line\">clang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark</span><br></pre></td></tr></table></figure>\n\n<p>注意到可以通过ssh连接本地，以便于通过vscode控制服务器，所以花了一部分时间配置ssh。</p>\n<p>在本地使用git bash的命令生成isa码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;自己的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>会在<code>~/.ssh/</code> 目录下生成 <code>id_rsa</code>（私钥）和 <code>id_rsa.pub</code>（公钥），私钥不用管，把公钥复制下来，在腾讯云服务器手动配置ssh。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;你的公钥内容&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以保证服务器收到公钥后同意连接了。</p>\n<p>接下来是vscode的配置，通过配置本地的vscode，以保证vscode能正确的发送ssh请求。</p>\n<p>打开vscode后，<code>ctrl+shift+p</code>打开命令行，输入<code>remote ssh</code>，点打开ssh配置文件，会安装一堆插件，直接无脑安装即可</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190300944-1200574314.png\"></p>\n<p>之后打开ssh配置文件，点第一个config文件。</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190248893-755240931.png\"></p>\n<p>大概率config是空白，按以下格式输入就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tencent-cloud(这个地方随便输入啥都行)</span><br><span class=\"line\">    HostName 114.514.0(自己服务器的公网ip地址)</span><br><span class=\"line\">    User ubuntu(在服务器上输入whoami命令，会返回用户名)</span><br><span class=\"line\">    Port 22</span><br></pre></td></tr></table></figure>\n\n<p>然后再点<code>ctrl+shift+p</code>就可以连接到主机了</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190329214-2023054758.png\"></p>\n<hr>\n<h2 id=\"2-使用命令行上网\"><a href=\"#2-使用命令行上网\" class=\"headerlink\" title=\"2 使用命令行上网\"></a>2 使用命令行上网</h2><h3 id=\"2-1-获取网页\"><a href=\"#2-1-获取网页\" class=\"headerlink\" title=\"2.1 获取网页\"></a>2.1 获取网页</h3><p>   日常里，在浏览器我们可以直接输入 <a href=\"http://cs144.keithw.org/hello\">http://cs144.keithw.org/hello</a> 以查看结果。  而现在，我们需要手动模拟浏览器的行为。</p>\n<ol>\n<li><p>在vscode终端中，运行以下命令，以连接服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet cs144.keithw.org http</span><br></pre></td></tr></table></figure>\n\n<p>telnet实际上与ssh类似，都是一个实用的远程连接命令，该命令允许用本地计算机去连接cs144网页的服务器，我们在本地的命令可以在服务器上运行。</p>\n<p>正常情况下，会得到以下执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~$ telnet cs144.keithw.org http</span><br><span class=\"line\">Trying 104.196.238.229...</span><br><span class=\"line\">Connected to cs144.keithw.org.</span><br><span class=\"line\">Escape character is <span class=\"string\">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这条执行结果告诉我们连接上了cs144这个网站，<code>Escape character is &#39;^]&#39;.</code>是 <code>telnet</code> 的提示，表示我们可以按 <code>Ctrl + ]</code> 进入 <code>telnet</code> 的命令模式（退出、关闭连接等），我们暂时不用管。</p>\n<p>依次输入：  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br></pre></td></tr></table></figure>\n\n<p>需要按两次回车，如果接收到以下响应，就表示请求成功了。  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 10 Feb 2025 11:22:42 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>Apache</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span><span class=\"punctuation\">: </span>Thu, 13 Dec 2018 15:45:29 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span><span class=\"punctuation\">: </span>&quot;e-57ce93446cb64&quot;</span><br><span class=\"line\"><span class=\"attribute\">Accept-Ranges</span><span class=\"punctuation\">: </span>bytes</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>14</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/plain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-pgsql\">Hello, CS144!</span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">Connection</span> closed <span class=\"keyword\">by</span> <span class=\"keyword\">foreign</span> host.</span></span><br><span class=\"line\"><span class=\"language-pgsql\"></span></span><br></pre></td></tr></table></figure>\n\n<p>我们来一行行观察一下这些命令：</p>\n<ul>\n<li><p><code>GET /hello HTTP/1.1</code></p>\n<p>这行表示客户端向服务器发出了一个 <code>GET</code> 请求，请求资源 <code>/hello</code>。<code>GET</code> 是一种 HTTP 请求方法，表示客户端请求获取指定的资源</p>\n</li>\n<li><p><code>Host: cs144.keithw.org</code></p>\n<p><code>Host</code> 表示目标服务器的主机名或域名。这里是 <code>cs144.keithw.org</code>，告诉服务器哪个虚拟主机处理请求</p>\n</li>\n</ul>\n<p>在相应部分中：</p>\n<ul>\n<li><code>HTTP/1.1 200 OK</code>: 表示 <code>/hello</code> 请求已成功处理。</li>\n<li><code>Content-Type: text/plain</code>: 表示返回的数据类型是纯文本（<code>text/plain</code>）。</li>\n<li><code>Content-Length: 14</code>: 表示响应体的长度为 14 字节，意味着返回的内容长度是 14 字符。</li>\n<li><code>Hello, CS144!</code>: 这是响应体的内容，即服务器返回的数据。客户端请求 <code>/hello</code> 时，服务器返回了 <code>Hello, CS144!</code> 这段文本。</li>\n</ul>\n<p>也就是说，这些指令等效于直接输入<code>cs144.keithw.org/hello</code>，而且可以得到<code>hello,cs144!</code>这段文本：</p>\n<p><img src=\"https://img2024.cnblogs.com/blog/2269346/202502/2269346-20250216190408084-926072557.png\"></p>\n<p>任务是手动获取URL <code>http://cs144.keithw.org/lab0/sunetid</code>（替换为你的SUNet ID），从响应头 <code>X-Your-Code-Is</code> 中提取密钥。</p>\n<p>那我们只要修改<code>get</code>请求就好了</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 10 Feb 2025 11:50:10 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span><span class=\"punctuation\">: </span>Apache</span><br><span class=\"line\"><span class=\"attribute\">X-You-Said-Your-SunetID-Was</span><span class=\"punctuation\">: </span>114514</span><br><span class=\"line\"><span class=\"attribute\">X-Your-Code-Is</span><span class=\"punctuation\">: </span>45573</span><br><span class=\"line\"><span class=\"attribute\">Content-length</span><span class=\"punctuation\">: </span>110</span><br><span class=\"line\"><span class=\"attribute\">Vary</span><span class=\"punctuation\">: </span>Accept-Encoding</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>text/plain</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-applescript\">Hello! You told us <span class=\"keyword\">that</span> your SUNet ID was <span class=\"string\">&quot;114514&quot;</span>. Please see <span class=\"keyword\">the</span> HTTP headers (<span class=\"keyword\">above</span>) <span class=\"keyword\">for</span> your secret code.</span></span><br><span class=\"line\"><span class=\"language-applescript\">Connection closed <span class=\"keyword\">by</span> foreign host.</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"2-2-给自己发送一封邮件\"><a href=\"#2-2-给自己发送一封邮件\" class=\"headerlink\" title=\"2.2 给自己发送一封邮件\"></a>2.2 给自己发送一封邮件</h3><p>   本小节要求使用**可靠字节传输流（reliable byte stream）**发送邮件给另一台电脑了，但是由于各个邮箱并没有给权限，且我们不是斯坦福大学学生，所以本小节是无法完成的。</p>\n<ol>\n<li><p>在原课程中，要求我们通过SSH登录Stanford网络：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet 148.163.153.234 smtp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按顺序输入SMTP命令：  </p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HELO mycomputer.stanford.edu</span><br><span class=\"line\">MAIL FROM: &lt;sunetid@stanford.edu&gt;</span><br><span class=\"line\">RCPT TO: &lt;sunetid@stanford.edu&gt;</span><br><span class=\"line\">DATA</span><br><span class=\"line\"><span class=\"attribute\">From</span><span class=\"punctuation\">: </span>sunetid@stanford.edu</span><br><span class=\"line\"><span class=\"attribute\">To</span><span class=\"punctuation\">: </span>sunetid@stanford.edu</span><br><span class=\"line\"><span class=\"attribute\">Subject</span><span class=\"punctuation\">: </span>Hello from CS144 Lab 0</span><br><span class=\"line\">QUIT</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"2-3-监听与连接\"><a href=\"#2-3-监听与连接\" class=\"headerlink\" title=\"2.3 监听与连接\"></a>2.3 监听与连接</h3><p>   上面两节或许让你对<code>telnet</code>有了理解：它是一个客户端程序，可以与其他计算机（服务器）程序建立连接，现在尝试成为服务器——等待客户端的连接程序。</p>\n<ol>\n<li><p><strong>启动服务端</strong></p>\n<p>在虚拟机的终端1运行 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netcat -v -l -p 9090</span><br></pre></td></tr></table></figure>\n\n<p>这是在终端1上启动一个监听端口为 <code>9090</code> 的服务端，使用 <code>netcat</code> (简称 <code>nc</code>) 工具来监听该端口。</p>\n<ul>\n<li><code>-v</code> 是指启用详细模式（verbose），可以显示更多的调试信息。</li>\n<li><code>-l</code> 表示让 <code>netcat</code> 进入监听模式，等待客户端连接。</li>\n<li><code>-p 9090</code> 指定监听端口为 <code>9090</code>。</li>\n</ul>\n<p>执行该命令后，你应该会看到类似于以下的输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listening on [0.0.0.0] (family 0, port 9090)</span><br></pre></td></tr></table></figure>\n\n<p>这表明 <code>netcat</code> 正在监听端口 <code>9090</code>，等待客户端连接。</p>\n</li>\n<li><p><strong>启动客户端：</strong></p>\n<p>在虚拟机上再打开一个终端2，如果是ssh连接的话就再打开一个vscode，运行： </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet localhost 9090</span><br></pre></td></tr></table></figure>\n\n<p>这是在终端2上执行的命令，目的是连接到在终端1上运行的服务端。</p>\n<ul>\n<li><code>localhost</code> 是指本地计算机的 IP 地址。</li>\n<li><code>9090</code> 是前面指定的服务端口号。<br>使用 <code>telnet</code> 工具可以与监听端口建立连接，并进行简单的文本通信。</li>\n</ul>\n<p>如果一切正常，你应该会看到类似的输出：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trying 127.0.0.1...Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>这表明 <code>telnet</code> 成功连接到了服务端。</p>\n</li>\n<li><p><strong>进行双向通信</strong></p>\n<p>在任意一个终端（客户端或服务端）键入内容，你会看到对方窗口立即显示你输入的内容。</p>\n<p>例如，在 <code>telnet</code> 窗口中输入 <code>Hello</code>，然后按回车键，你会看到 <code>netcat</code> 服务端窗口会显示出 <code>Hello</code>，反之亦然。</p>\n</li>\n<li><p><strong>终止连接：</strong></p>\n<p>在 <code>netcat</code> 端，按下 <code>Ctrl-C</code> 会结束服务端进程，连接将被关闭。此时，<code>telnet</code> 客户端也会自动断开连接并退出。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>   由于是该过程是使用本地连接（<code>localhost</code>），所以整个过程不需要依赖外部网络。</p>\n<hr>\n<h2 id=\"3-使用流套接字（stream-socket）编写网络程序\"><a href=\"#3-使用流套接字（stream-socket）编写网络程序\" class=\"headerlink\" title=\"3 使用流套接字（stream socket）编写网络程序\"></a>3 使用流套接字（stream socket）编写网络程序</h2><p>   在本部分，你将写一个能通过互联网获取页面的简短程序，利用 Linux 内核和大多数其他操作系统提供的功能，以在两个程序之间创建可靠的双向字节流：一个程序在您的计算机上运行，另一个程序在另一台计算机上运行。</p>\n<p>   这个功能称之为“<strong>流套接字</strong>”（stream socket），无论是对于您的程序还是对服务器来说，套接字看起来像一个普通的文件描述符。当两个流套接字连接时，写入一个套接字的任何字节最终都会以相同的顺序从另一台计算机上的另一个套接字输出。</p>\n<p>   事实上，互联网并不会真正的提供可靠字节流连接，相反，互联网真正做的就是尽“最大努力”将短小的数据片段传送到目的地，这短小的数据片称之为<code>数据报</code>，而每个数据报都包含一些报头，它指定了源地址和目标地址等信息——它来自哪台计算机，要发送到哪台计算机——以及要传送到目标计算机的一些有效载荷数据（最多约 1,500 字节）。</p>\n<p>   尽管互联网是尽力传送每个数据报，但数据报依然会：</p>\n<ul>\n<li>丢失</li>\n<li>无序传送</li>\n<li>传送时内容发生更改</li>\n<li>重复传送和多次传送</li>\n</ul>\n<p>   因此，将“<strong>尽力而为的数据报</strong>”转换为“<strong>可靠字节流</strong>”实际是两端的操作系统通常负责。</p>\n<p>   两台计算机必须合作，以确保流中的每个字节传送到另一端的流套接字时都能在正确位置。它们还必须告诉对方它们准备从另一台计算机接收多少数据，并确保发送的数据不超过另一端愿意接受的数据。所有这些都是使用 1981 年制定的约定方案完成的，该方案称为**<code>传输控制协议 (TCP)</code>**。</p>\n<p>   在本lab中，我们将编写一个名为“webget”的程序，该程序创建 TCP 流套接字、连接到 Web 服务器并获取页面——请注意，这个过程依赖于操作系统内部的 <strong>TCP&#x2F;IP 协议栈</strong>，我们只是调用系统提供的 <strong>socket API</strong>，而不需要自己管理数据包的可靠传输、重传、流量控制等底层细节。因此，我们只是站在 TCP 之上的<strong>应用层</strong>操作，比如建立连接、发送 HTTP 请求、接收数据，不过，在未来的lab中，我们会通过自己实现<strong>TCP</strong>来从不太可靠的数据报中创建可靠的字节流。</p>\n<h3 id=\"3-1-配置代码仓库\"><a href=\"#3-1-配置代码仓库\" class=\"headerlink\" title=\"3.1 配置代码仓库\"></a>3.1 配置代码仓库</h3><ol>\n<li><p>我们使用名为“<strong>Minnow</strong>“的代码库，在虚拟机上执行：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:CS144/minnow.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> minnow</span><br></pre></td></tr></table></figure>\n\n<p>在GitHub创建<strong>私有仓库</strong>“minnow”，并添加协作者 <code>cs144-grader</code>（用以评分）</p>\n</li>\n<li><p>关联本地与远程仓库：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:username/minnow.git</span><br><span class=\"line\">git push github</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>git remote add</code></strong>：添加一个远程仓库（remote repository）。</p>\n</li>\n<li><p><strong><code>github</code></strong>：这是你为这个远程仓库取的名字，后续 <code>git push github</code> 会用到它。</p>\n</li>\n<li><p><strong><code>git@github.com:username/minnow.git</code></strong>：使用<strong>SSH</strong>连接<strong>GitHub</strong>，<code>username</code> 需要替换成你的 GitHub 用户名。</p>\n</li>\n</ul>\n<p>这样就能让本地的 Git 仓库知道远程 GitHub 仓库的存在，并建立联系。之后，就可以使用 <code>git push</code> 和 <code>git pull</code> 与 GitHub 交互。</p>\n<p>我们可以使用一行命令来查看连接结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>如果出现了以下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ git remote -v</span><br><span class=\"line\">github  git@github.com:seekerzhz/minnow.git (fetch)</span><br><span class=\"line\">github  git@github.com:seekerzhz/minnow.git (push)</span><br><span class=\"line\">origin  git@github.com:CS144/minnow.git (fetch)</span><br><span class=\"line\">origin  git@github.com:CS144/minnow.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>就说明连接成功了。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-2-编译代码\"><a href=\"#3-2-编译代码\" class=\"headerlink\" title=\"3.2 编译代码\"></a>3.2 编译代码</h3>   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -S . -B build</span><br><span class=\"line\">cmake --build build</span><br></pre></td></tr></table></figure>\n\n<p>   在执行第一条命令的时候，可能出现如下结果：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake -S . -B build</span><br><span class=\"line\">CMake Error at CMakeLists.txt:1 (cmake_minimum_required):</span><br><span class=\"line\">  CMake 3.24.2 or higher is required.  You are running version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n\n<p>   cmake版本太低了，我们查看一下cmake的版本：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version</span><br><span class=\"line\"></span><br><span class=\"line\">cmake version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure>\n\n<p>   毕竟是kitware提供的，即便我们执行更新指令也没有办法更新，所以我们可以从snap更新cmake：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> snap install cmake --classic</span><br></pre></td></tr></table></figure>\n\n<p>   只是会出现这种情况：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ <span class=\"built_in\">sudo</span> snap install cmake --classic</span><br><span class=\"line\"></span><br><span class=\"line\">cmake 3.31.5 from Crascit✓ installed</span><br><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ cmake --version</span><br><span class=\"line\">cmake version 3.22.1</span><br><span class=\"line\"></span><br><span class=\"line\">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ <span class=\"built_in\">which</span> cmake</span><br><span class=\"line\">/usr/bin/cmake</span><br></pre></td></tr></table></figure>\n\n<p>   虽然更新了，但cmake用的还是user&#x2F;bin的cmake，我们只要改一下路径，手动将 <code>/usr/bin/cmake</code> 替换为 Snap 版本：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">ln</span> -sf /snap/bin/cmake /usr/bin/cmake</span><br></pre></td></tr></table></figure>\n\n<p>   然后再次运行：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --version</span><br></pre></td></tr></table></figure>\n\n<p>   此时应该会显示 <strong>3.31.5</strong>。</p>\n<p>   <code>cmake -S . -B build</code></p>\n<ul>\n<li><code>-S .</code>：指定 <strong>源代码</strong> 目录为当前目录 (<code>.</code>)。</li>\n<li><code>-B build</code>：指定 <strong>构建目录</strong> 为 <code>build</code>，所有编译文件会存放在这个 <code>build</code> 目录中，而不会污染源代码目录。</li>\n</ul>\n<p>   执行后， <code>build/</code> 目录被创建，其中包含 CMake 生成的构建文件。</p>\n<p>   同时，在执行<code>cmake --build build</code>的时候也会出现问题</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Building <span class=\"keyword\">in</span> <span class=\"string\">&#x27;Debug&#x27;</span> mode.</span><br><span class=\"line\">-- Configuring <span class=\"keyword\">done</span> (0.2s)</span><br><span class=\"line\">-- Generating <span class=\"keyword\">done</span> (0.3s)</span><br><span class=\"line\">-- Build files have been written to: /home/lighthouse/minnow/build</span><br><span class=\"line\">[  5%] Building CXX object util/CMakeFiles/util_debug.dir/debug.cc.o</span><br><span class=\"line\">[ 21%] Built target minnow_debug</span><br><span class=\"line\">[ 26%] Building CXX object tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o</span><br><span class=\"line\">In file included from /home/lighthouse/minnow/util/debug.cc:1:</span><br><span class=\"line\">/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory</span><br><span class=\"line\">    3 | <span class=\"comment\">#include &lt;format&gt;</span></span><br><span class=\"line\">      |          ^~~~~~~~</span><br><span class=\"line\">compilation terminated.</span><br><span class=\"line\">make[2]: *** [util/CMakeFiles/util_debug.dir/build.make:93: util/CMakeFiles/util_debug.dir/debug.cc.o] Error 1</span><br><span class=\"line\">make[1]: *** [CMakeFiles/Makefile2:2786: util/CMakeFiles/util_debug.dir/all] Error 2</span><br><span class=\"line\">make[1]: *** Waiting <span class=\"keyword\">for</span> unfinished <span class=\"built_in\">jobs</span>....</span><br><span class=\"line\">In file included from /home/lighthouse/minnow/tests/common.hh:4,</span><br><span class=\"line\">                 from /home/lighthouse/minnow/tests/common.cc:1:</span><br><span class=\"line\">/home/lighthouse/minnow/util/debug.hh:3:10: fatal error: format: No such file or directory</span><br><span class=\"line\">    3 | <span class=\"comment\">#include &lt;format&gt;</span></span><br><span class=\"line\">      |          ^~~~~~~~</span><br><span class=\"line\">compilation terminated.</span><br><span class=\"line\">make[2]: *** [tests/CMakeFiles/minnow_testing_debug.dir/build.make:79: tests/CMakeFiles/minnow_testing_debug.dir/common.cc.o] Error 1</span><br><span class=\"line\">make[1]: *** [CMakeFiles/Makefile2:2978: tests/CMakeFiles/minnow_testing_debug.dir/all] Error 2</span><br><span class=\"line\">make: *** [Makefile:101: all] Error 2</span><br></pre></td></tr></table></figure>\n\n<p>   你妈的，没有<strong>format</strong>库啊。<strong>format</strong>是cpp20新增的特性，这时候应该更新gcc了</p>\n<p>   <strong>添加 Ubuntu 官方的 GCC PPA</strong>（这是一个提供更新版本的包源）：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>安装新版本的 GCC</strong>，至少是GCC 13才支持format。</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install gcc-13 g++-13</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>切换到安装的 GCC 版本</strong>：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13</span><br></pre></td></tr></table></figure>\n\n<p>   <strong>验证是否成功切换</strong>：</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lighthouse@VM-16-14-ubuntu:~/minnow$ gcc --version</span><br><span class=\"line\">gcc (Ubuntu 13.1.0-8ubuntu1~22.04) 13.1.0</span><br><span class=\"line\">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>\n\n<p>   ok了。</p>\n<h3 id=\"3-3-现代C-编程规范\"><a href=\"#3-3-现代C-编程规范\" class=\"headerlink\" title=\"3.3 现代C++编程规范\"></a>3.3 现代C++编程规范</h3><p>   CS144是一个以编程为主的课程。实验作业使用现代C++的编程风格，采用2011年及以后的新特性，目标是让代码尽可能安全。这种风格与之前的C++编程方式有所不同。更多相关信息可以参考<a href=\"http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines\">C++核心指南</a>。</p>\n<p>   我们的基本目标是：确保每个对象的公共接口尽可能小，内部进行严格的安全检查，避免错误使用，并能在不需要时自动清理自己。我们希望避免需要手动配对的操作（例如：<code>malloc/free</code> 或 <code>new/delete</code>），因为会发生操作没有正确配对（例如：函数提前返回或抛出异常）。所以，我们希望通过构造函数来完成资源的初始化，并在析构函数中自动清理资源。这种做法叫做“资源获取即初始化”（RAII，<strong>R</strong>esource <strong>A</strong>cquisition <strong>I</strong>s <strong>I</strong>nitialization）。</p>\n<p>   <strong>我们需要遵循以下规则：</strong></p>\n<ul>\n<li>使用官方的C++文档（<a href=\"https://en.cppreference.com)作为参考.(不建议使用/\">https://en.cppreference.com）作为参考。（不建议使用</a> <code>cplusplus.com</code>，因为它可能已经过时。）</li>\n<li><strong>永远不要使用 <code>malloc()</code> 或 <code>free()</code></strong>。</li>\n<li><strong>永远不要使用 <code>new</code> 或 <code>delete</code></strong>。</li>\n<li><strong>尽量避免使用原始指针（<code>*</code>）</strong>，仅在绝对必要时才使用智能指针（<code>unique_ptr</code> 或 <code>shared_ptr</code>）。在这门课程中不需要这些。</li>\n<li>避免使用模板、线程、锁和虚函数。在这门课程中也不需要这些。</li>\n<li><strong>避免使用 C 风格的字符串（如 <code>char *str</code>）和字符串函数（如 <code>strlen()</code>、<code>strcpy()</code>）</strong>，这些容易出错。尽量使用 <code>std::string</code> 来处理字符串。</li>\n<li><strong>不要使用 C 风格的强制类型转换（如 <code>(FILE *)x</code>）</strong>，如果需要转换类型，使用 C++ 的 <code>static_cast</code>（不过在这门课中你通常不需要这么做）。</li>\n<li>优先使用常量引用（<code>const</code>）来传递函数参数，例如：<code>const Address &amp;address</code>。</li>\n<li><strong>让每个变量都成为常量（<code>const</code>），除非必须修改它</strong>。</li>\n<li><strong>让每个方法都成为常量（<code>const</code>），除非方法需要修改对象</strong>。</li>\n<li><strong>避免使用全局变量</strong>，并尽可能缩小每个变量的作用范围。</li>\n<li>在提交作业之前，请运行 <code>cmake --build build --target tidy</code> 来查看代码中可以改进的地方，运行 <code>cmake --build build --target format</code> 来统一格式。</li>\n</ul>\n<p>   <strong>关于使用 Git：</strong></p>\n<p>   实验作业是通过 Git（版本控制工具）进行分发的。Git 可以帮助记录你做过的所有更改，便于调试和追踪代码的历史。我们建议你在编写代码时，频繁进行小的提交，并且每次提交时都要写清楚修改了什么，以及为什么做这个修改。理想情况下，每次提交后，代码应该可以正常编译，并且随着时间的推移，测试逐渐通过。频繁的小提交有助于调试（因为每次提交都会编译，而且提交信息清晰地说明了修改的目的），同时也能防止出现作弊的嫌疑，因为你可以清楚地看到自己在每个阶段的进展。这也会帮助你在未来的编程职业中更好地管理代码。</p>\n<p>   评分人员会根据你的 Git 提交记录，了解你是如何逐步完成实验的。如果你不懂如何使用 Git，可以向 CS144 办公室寻求帮助，或查看一些 Git 教程（例如：<a href=\"https://guides.github.com/introduction/git-handbook%EF%BC%89%E3%80%82%E6%9C%80%E5%90%8E%EF%BC%8C%E8%AF%B7%E7%A1%AE%E4%BF%9D%E5%B0%86%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%80%E4%B8%AA%E7%A7%81%E6%9C%89%E7%9A%84\">https://guides.github.com/introduction/git-handbook）。最后，请确保将代码提交到一个私有的</a> GitHub 仓库，确保代码不会公开访问。</p>\n<p>   再次强调：在工作过程中，<strong>要频繁进行小的提交</strong>，并写清楚每次提交的修改内容和原因。</p>\n<hr>\n<h3 id=\"3-4-阅读-Minnow-支持代码\"><a href=\"#3-4-阅读-Minnow-支持代码\" class=\"headerlink\" title=\"3.4 阅读 Minnow 支持代码\"></a><strong>3.4 阅读 Minnow 支持代码</strong></h3><p>   为了支持这种编程风格，Minnow 的类将操作系统函数（可以通过 C 调用）封装在“现代”C++中。我们为一些你应该在 CS 111 课程中熟悉的概念提供了 C++ 封装，特别是套接字和文件描述符。</p>\n<p>   阅读 <code>util/socket.hh</code> 和 <code>util/file descriptor.hh</code> 文件中的<code>public</code>接口部分（即文件中“public:”之后的内容）。需要注意的是，<code>Socket</code> 是 <code>FileDescriptor</code> 类型的一种，<code>TCPSocket</code> 是 <code>Socket</code> 类型的一种。</p>\n<h3 id=\"3-5-编写-webget\"><a href=\"#3-5-编写-webget\" class=\"headerlink\" title=\"3.5 编写 webget\"></a><strong>3.5 编写 webget</strong></h3><p>   现在是时候实现 <code>webget</code> 程序了，它将通过操作系统的 TCP 支持和流套接字抽象来获取网页——在本实验中之前，我们曾手动发送了一些请求，现在我们需要用<code>cpp</code>程序代替他们。</p>\n<ol>\n<li><p>从构建目录中，使用文本编辑器或 IDE 打开 <code>../apps/webget.cc</code> 文件。</p>\n</li>\n<li><p>在 <code>get_URL</code> 函数中，按照文件中描述的方式实现一个简单的 Web 客户端，使用你之前使用过的 HTTP 请求格式，用上 <code>TCPSocket</code> 和 <code>Address</code> 类。</p>\n<p>首先看一看<code>get_URL</code>的样子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">get_URL</span><span class=\"params\">( <span class=\"type\">const</span> string&amp; host, <span class=\"type\">const</span> string&amp; path )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  cerr &lt;&lt; <span class=\"string\">&quot;Function called: get_URL(&quot;</span> &lt;&lt; host &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; path &lt;&lt; <span class=\"string\">&quot;)\\n&quot;</span>;</span><br><span class=\"line\">  cerr &lt;&lt; <span class=\"string\">&quot;Warning: get_URL() has not been implemented yet.\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数<code>host</code>和<code>path</code>是什么？——我们不妨回忆一下之手动发送的HTTP请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/lab0</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>cs144.keithw.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br></pre></td></tr></table></figure>\n\n<p><code>host</code>是我们要访问的地址，</p>\n</li>\n</ol>\n<p>​\t在 HTTP 请求中，每一行都必须以 “\\r\\n” 结束（仅使用“\\n”或 <code>endl</code> 是不够的）。同时在请求中，包含了 <code>Connection: close</code> 这一行，这告诉服务器，在处理完当前请求后，客户端不会再发送任何请求。服务器会发送一个响应后立即关闭与客户端的连接。你将通过检测“EOF”（文件结束）来知道服务器已经完成了响应，因为当服务器的字节流完全传输完毕时，你的套接字会到达 EOF。因此，我们必须确保从服务器读取并打印所有输出，直到套接字达到“EOF”（文件结束）——单次调用 <code>read</code> 是不够的。我们预计你大约需要写 10 行代码。</p>\n<p>通过运行 <code>cmake --build build .</code> 编译程序。</p>\n<ol start=\"3\">\n<li><p>通过运行 <code>./apps/webget cs144.keithw.org /hello</code> 来测试你的程序。试试看你从浏览器访问 <code>http://cs144.keithw.org/hello</code> 时的结果和程序输出有什么区别？它与第 2.1 节的结果有何不同？你可以自由尝试——测试任何 HTTP URL！</p>\n</li>\n<li><p>当程序似乎正常工作时，运行 <code>cmake --build build --target check_webget</code>来运行自动化测试。在实现<code>get_URL</code> 函数之前，你应该看到如下输出：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build --target check_webget</span><br><span class=\"line\">Test project /home/cs144/minnow/build</span><br><span class=\"line\">Start 1: compile with bug-checkers</span><br><span class=\"line\">1/2 Test <span class=\"comment\">#1: compile with bug-checkers ........ Passed 1.02 sec</span></span><br><span class=\"line\">Start 2: t_webget</span><br><span class=\"line\">2/2 Test <span class=\"comment\">#2: t_webget .........................***Failed 0.01 sec</span></span><br><span class=\"line\">Function called: get_URL(cs144.keithw.org, /nph-hasher/xyzzy)</span><br><span class=\"line\">Warning: get_URL() has not been implemented yet.</span><br><span class=\"line\">ERROR: webget returned output that did not match the <span class=\"built_in\">test</span><span class=\"string\">&#x27;s expectations</span></span><br></pre></td></tr></table></figure>\n\n<p>完成作业后，你应该看到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build build --target check_webget</span><br><span class=\"line\">Test project /home/cs144/minnow/build</span><br><span class=\"line\">Start 1: compile with bug-checkers</span><br><span class=\"line\">1/2 Test <span class=\"comment\">#1: compile with bug-checkers ........ Passed 1.09 sec</span></span><br><span class=\"line\">Start 2: t_webget</span><br><span class=\"line\">2/2 Test <span class=\"comment\">#2: t_webget ......................... Passed 0.72 sec</span></span><br><span class=\"line\">100% tests passed, 0 tests failed out of 2</span><br></pre></td></tr></table></figure>\n\n<pre><code>  1. 评分人员将使用与你的单元测试不同的主机名和路径来运行你的 `webget` 程序，因此请确保它不仅能在单元测试使用的主机名和路径上运行。\n</code></pre>\n<h2 id=\"4-内存中的可靠字节流\"><a href=\"#4-内存中的可靠字节流\" class=\"headerlink\" title=\"4 内存中的可靠字节流\"></a>4 内存中的可靠字节流</h2><p>   到目前为止，你已经看到如何通过可靠字节流的抽象来进行网络通信，尽管互联网本身只提供“尽力而为”（不可靠）的数据报服务。</p>\n<p>   在本周实验的最后，你将实现一个对象，它在单台计算机的内存中提供这个抽象（你可能在 CS 110&#x2F;111 中做过类似的工作）。字节被写入“输入”端，并可以按相同的顺序从“输出”端读取。字节流是有限的：写入方可以结束输入，之后不能再写入字节。当读者读取到流的末尾时，它将遇到“EOF”（文件结束），并且不能再读取字节。你的字节流还将进行流量控制，以限制其在任何给定时刻的内存消耗。该对象初始化时会设置一个“容量”，即它在任何给定时刻愿意存储的最大字节数。字节流将限制写入方在任何给定时刻的写入量，以确保流不会超出其存储容量。当读者读取字节并将其从流中移除时，写入方才可以继续写入。</p>\n<p>   请注意：字节流是有限的，但在写入方结束输入并完成流之前，它几乎可以是任意长的。你的实现必须能够处理远远超过容量的流。容量限制的是当前时刻内存中存储的字节数（即已写入但尚未读取的字节数），但并不限制流的长度。一个容量仅为一个字节的对象仍然可以承载一个长达数TB的流，只要写入方一次只写一个字节，且读取方在写入方允许写入下一个字节之前读取完每个字节。</p>\n<p>   以下是写入方的接口：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(std::string data)</span></span>; <span class=\"comment\">// 向流中推送数据，但仅限于可用容量允许的字节数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 表示流已经结束，之后不能再写入。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_closed</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否已经关闭？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">available_capacity</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 当前可以写入多少字节？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_pushed</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 总共推送到流中的字节数</span></span><br></pre></td></tr></table></figure>\n\n<p>   以下是读取方的接口：</p>\n   <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::string_view <span class=\"title\">peek</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 查看缓冲区中的下一个字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"type\">uint64_t</span> len)</span></span>; <span class=\"comment\">// 从缓冲区中移除 `len` 字节</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_finished</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否已经完成（已关闭且完全被读取）？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">has_error</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 流是否发生了错误？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_buffered</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 当前缓冲的字节数（已推送但未读取）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">uint64_t</span> <span class=\"title\">bytes_popped</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>; <span class=\"comment\">// 总共从流中移除的字节数</span></span><br></pre></td></tr></table></figure>\n\n<p>   打开 <code>src/byte_stream.hh</code> 和 <code>src/byte_stream.cc</code> 文件，并实现提供此接口的对象。在开发字节流实现时，你可以通过运行 <code>cmake --build build --target check0</code> 来运行自动化测试。</p>\n<p>   如果所有测试通过，<code>check0</code> 测试将会运行一个速度基准测试。对于这门课程，只要你的实现速度超过 0.1 Gbit&#x2F;s（即每秒 1 亿比特），对于三种 <code>pop</code> 长度的测试而言就是合格的。（实现速度可能会超过 10 Gbit&#x2F;s，但这取决于你的计算机速度，并不是必需的。）</p>\n<p>   <strong>接下来做什么？</strong> 在接下来的四周里，你将实现一个系统，提供相同的接口，但不是在内存中，而是通过不可靠传输的网络层，这就是传输控制协议（TCP）——这是世界上最普遍使用的计算机程序。</p>\n<hr>\n<h2 id=\"5-提交\"><a href=\"#5-提交\" class=\"headerlink\" title=\"5 提交\"></a>5 提交</h2><p>请注意以下几点</p>\n<ul>\n<li><p>在提交时，请只修改 <code>webget.cc</code> 和 <code>src</code> 目录下的源代码（<code>byte_stream.hh</code> 和 <code>byte_stream.cc</code>）。请不要修改任何测试代码或 <code>util</code> 中的辅助代码。</p>\n</li>\n<li><p>记得在编写代码时进行小的提交，并写出清晰的提交消息。每次提交后，记得将你的 VM 仓库备份到私有的 GitHub 仓库中，方法是运行 <code>git push github</code>。你的代码需要被提交并推送到 GitHub，才能进行评分。</p>\n</li>\n<li><p>提交作业前，请按以下顺序执行：</p>\n<p>(a) 确保所有更改都已提交到 Git 仓库。你可以运行 <code>git status</code> 来确保没有未提交的更改。记住：在编码时进行小的提交。 </p>\n<p>(b) 运行 <code>cmake --build build --target format</code> （以规范代码风格）</p>\n<p>(c) 运行 <code>cmake --build build --target check0</code> （确保自动化测试通过）</p>\n<p>(d) 可选：运行 <code>cmake --build build --target tidy</code> （建议改进以遵循良好的 C++ 编程实践）</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm7a9m31v0000rsy4ajsb8fs7","tag_id":"cm7afam8i0000kvy47nwvaqv7","_id":"cm7afam8k0001kvy45ccn7wtm"}],"Tag":[{"name":"开发","_id":"cm7afam8i0000kvy47nwvaqv7"}]}}